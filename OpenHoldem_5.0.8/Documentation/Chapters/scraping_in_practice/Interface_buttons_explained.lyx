#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
How the Interface-Buttons work
\end_layout

\begin_layout Standard
The holdem scraper has the concept of interface region(s) - such regions
 begin with the characters
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where X is a digit 0-9.
 the purpose of an iX region is to tell the autoplayer
\end_layout

\begin_layout Description
if buttons are present (visible or not --- i0state..i9state) 
\end_layout

\begin_layout Description
what buttons are present (i.e.
 fold call rais --- i0label..i9label) 
\end_layout

\begin_layout Description
where buttons are present (to click --- i0button..i9button, just the regions
 matter --- no transform required) 
\end_layout

\begin_layout Standard
The purpose of the button region is simply to tell the autoplayer where
 it needs to click the mouse.
 You can set the transform to "none".
 the purpose of the state region is to determine whether or not the button
 is visible or not.
 It's generally a small color region which has to return true when the button
 is visible.
 But you can use Hash as well.
 If you use hash, a true value will be identified as follows (so rename
 your images accordingly):
\end_layout

\begin_layout Itemize
on 
\end_layout

\begin_layout Itemize
yes 
\end_layout

\begin_layout Itemize
checked 
\end_layout

\begin_layout Itemize
true 
\end_layout

\begin_layout Itemize
lit
\end_layout

\begin_layout Standard
OpenHoldem will search for any of these substrings, so 
\begin_inset Quotes eld
\end_inset

checked7
\begin_inset Quotes erd
\end_inset

 would work too, but any other string will be seen as false.
 Each interface should also have a label region or regions that will further
 define the purpose of the button.
 So the engine recognizes the following key words within labels:
\end_layout

\begin_layout Itemize
fold 
\end_layout

\begin_layout Itemize
check 
\end_layout

\begin_layout Itemize
call 
\end_layout

\begin_layout Itemize
bet 
\end_layout

\begin_layout Itemize
raise 
\end_layout

\begin_layout Itemize
swag 
\end_layout

\begin_layout Itemize
allin 
\end_layout

\begin_layout Itemize
all-in 
\end_layout

\begin_layout Itemize
prefold 
\end_layout

\begin_layout Itemize
autopost 
\end_layout

\begin_layout Itemize
auto-post 
\end_layout

\begin_layout Itemize
autoblind 
\end_layout

\begin_layout Itemize
auto-blind 
\end_layout

\begin_layout Itemize
postblind 
\end_layout

\begin_layout Itemize
post-blind 
\end_layout

\begin_layout Itemize
sitin 
\end_layout

\begin_layout Itemize
sit-in 
\end_layout

\begin_layout Itemize
sitout 
\end_layout

\begin_layout Itemize
sit-out 
\end_layout

\begin_layout Itemize
leave
\end_layout

\begin_layout Itemize
exit
\end_layout

\begin_layout Standard
...and various forms of nearly fitting scrapes (e.g.
 
\begin_inset Quotes eld
\end_inset

aut0post
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

a111n
\begin_inset Quotes erd
\end_inset

 and other kind of leetspeak-lookalike).
 Any iXlabel region that produces one of these keywords will be seen by
 the engine as clickable for that specific action.
 Also all the strings starting with these keywords will work: examples:
 "callllll", "check01", "Raiseto:$10" etc.
\end_layout

\begin_layout Section
Sitin/Sitout particular behaviour 
\end_layout

\begin_layout Standard
These are somewhat inverted and can cause confusion, better to explain with
 an example: If you scrape the sitout button and name label as "sitout"
 and state as "true" when sitout button is visible, you will obtain the
 opposite behaviour.
 This is a Winholdem legacy, and derives from the first sites supported,
 like Full Tilt.
 As you know, Full Tilt has not exactly a sitout button, but more a check
 box.
 this means that: - label sitout + state unchecked (false), means you're
 sitting in, and you need to click if you want to sitout - label sitout
 + state checked (true), means you're sitting out and you need to click
 if you want to sit in again.
 I remember this causing me many headaches when I started, (and it still
 confuses beginners).
 However, this behaviour is inherited by all the other sites, even those
 with standard sitin/sitout buttons.
 Ongame is the classic example, with standard sitout button when you're
 sitting in, and sitin button when you're sitting out.
 So you think, ok, let's create a button with label sitout, state is true
 when sitting in, then a sitin button, state is true when sitting out...
 WRONG! You always need to have: 
\end_layout

\begin_layout Itemize
(label-->sitout and state-->false) or (label-->sitin and state-->true) when
 sitting in 
\end_layout

\begin_layout Itemize
(label-->sitin and state-->false) or (label-->sitout and state-->true) when
 sitting out 
\end_layout

\begin_layout Standard
This is the only way to make it work.
\end_layout

\begin_layout Section
The spam buttons 
\end_layout

\begin_layout Standard
i86-i860-i861-.....-i869 regions are reserved for anti-spam buttons.
 For spam we intend all the popups that can occlude your table.
 Some sites advertise tournaments about to start, other ask for confirmation
 when you leave the table, etc.
 OH can manage these popups and close them as long as they appear inside
 the poker table in a consistent position.
 There's no label region to scrape here, just state and button.
 
\end_layout

\begin_layout Enumerate
Shoot a frame of the table with the popup showing, and create i86state as
 a color or hash region which returns true like you would for any other
 button.
 
\end_layout

\begin_layout Enumerate
Paint a button region where you want OH to click to kill the popup.
 Done.
 
\end_layout

\begin_layout Standard
Notice that this is evaluated every heartbeat, so OH is very fast at closing
 these popups.
 If popups show in inconsistent locations or out of poker table, you need
 an external script, or external software like PTFB to manage them.
\end_layout

\begin_layout Section
The swag interface 
\end_layout

\begin_layout Standard
This is a particular interface button, where OH won't just click a button,
 but highlight some text-->delete it-->type a new text-->click the button
 (or send enter).
 So, you need to do some work on this.
 First thing first, try manually on the poker site which sequence of actions
 allow a successfull swag.
 Remember that in OH you can adjust swag settings for: 
\end_layout

\begin_layout Enumerate
highlighting the text (double click or click/drag) 
\end_layout

\begin_layout Enumerate
deleting (backspace/delete) 
\end_layout

\begin_layout Enumerate
acting (clicking raise button or sending enter) 
\end_layout

\begin_layout Standard
As soon as you identify which sequence works, you need to specify the usual
 iXstate, iXbutton, iXlabel (optional if you use i3 region, like I always
 do, but if you want it, it has to return swag or allin).
 You also need to add an iXedit region, placed where you have to click to
 perform action #1 above (highlighting).
\end_layout

\end_body
\end_document
