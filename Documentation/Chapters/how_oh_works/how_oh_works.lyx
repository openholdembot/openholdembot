#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
How OpenHoldem Operates
\end_layout

\begin_layout Section
\begin_inset Index idx
status open

\begin_layout Plain Layout
Connecting
\end_layout

\end_inset

Connecting to a table
\end_layout

\begin_layout Standard
As soon as you start OpenHoldem it will read all tablemaps in your scraper-folde
r and parse them for the information that is necessary to connect to a table.
 The auto-connector will then have a look for new tables that are not yet
 served by other instances once per heartbeat and connect if it finds a
 new one.
 This all happens automagically, however an explanation of what happens
 behind the scenes is useful if you have problems connecting to your target
 poker window.
 The following steps are taken to identify which windows on your screen
 are valid poker tables.
\end_layout

\begin_layout Enumerate
A list of all visible top level windows that have a non-blank caption is
 collected
\end_layout

\begin_layout Enumerate
Each window in this list is compared against each Table Map that you have
 placed in your 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scraper directory
\end_layout

\end_inset

“scraper” directory.
 For each step that follows, if a non-match is detected, OpenHoldem will
 then immediately move on to the next window/Table Map.
\end_layout

\begin_layout Enumerate
The size of the client portion of the window is compared to the clientsize
 records in the Table Map.
 The window is considered a match if the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Table Map
\end_layout

\end_inset

Table Map indicates the correct size as given by the record 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Clientsize
\end_layout

\end_inset

clientsize, or if the size is within the size limits given by clientsizemin
 and clientsizemax.
\end_layout

\begin_layout Enumerate
The window’s title text is compared to the keyword text filters provided
 by 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Titletext
\end_layout

\end_inset

titletext records in the Table Map.
 The window is considered a match if the free-form text in any of the titletext
 records is found in the window’s title.
 Additionally, if any !titletext records are present in the Table Map, then
 a window is considered a non-match if the free-form text in any of the
 !titletext records is found in the window’s title.
 
\end_layout

\begin_layout Enumerate
If OpenHoldem finds a matching pair of tablemap and table it will look in
 the shared memory data-structures if the table gets already served.
 If this is not the case OpenHoldem will connect to that table.
 The connected table will then be moced to a free slot if the table-positioner
 is enabled and the autoplazer will start playing.
\end_layout

\begin_layout Section
The 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Heartbeat cycle
\end_layout

\end_inset

Heartbeat Cycle 
\end_layout

\begin_layout Standard
Once OpenHoldem has been connected to a table, it will enter into a continuous
 loop that performs a variety of actions.
 The cycle of these actions is described here in order of their execution.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="75text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scrape window
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ask the screen 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scraper
\end_layout

\end_inset

scraper engine to scrape and interpret the current pixels on the poker window
 based on the parameters in the loaded Table Map {Creating a Table Map}.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scraper preprocessor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OpenHoldems built-in scraper preprocessor will then preprocess some textual
 input from the scraper; especially title-string, bets and balances.
 For example it will remove spaces inside numbers, replace commas inside
 numbers by dots, replace outlandish currency-signs by dollars or remove
 other superflous texts, such as 
\begin_inset Quotes eld
\end_inset

pot: (150 + 300)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate symbols
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate all OpenHoldem symbols {Calculated Symbols}.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Replay frames
\end_layout

\end_inset

 replay frame
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a replay frame {Replay Frames} is requested in preferences {Preferences},
 OpenHoldem will store an image file and a HTML-file in the scraper-directory
 for a future settion-review with OHReplay
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validate game state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Validator
\end_layout

\end_inset

is enabled in preferences {Preferences}, then validate the current game
 state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Send state to user dll
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a 
\begin_inset Index idx
status open

\begin_layout Plain Layout
User DLL
\end_layout

\end_inset

User DLL {User DLL} is loaded, then send the current game state to it.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Autoplay
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Autoplayer
\end_layout

\end_inset

 Autoplayer is engaged, then ask the Autoplayer to do its bit.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wait
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sleep for the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scrape delay
\end_layout

\end_inset

Scrape Delay period of time as specified in preferences {Preferences}, then
 start the next cycle.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
The 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Autoplayer
\end_layout

\end_inset

Autoplayer
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Autoplayer"

\end_inset

 (OH-script)
\end_layout

\begin_layout Standard
OpenHoldem’s Autoplayer engine uses the following logic to decide what action
 to take on the poker window:
\end_layout

\begin_layout Enumerate
If the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$prefold
\end_layout

\end_inset

f$prefold function evaluates to non-zero, and a fold control is present,
 then fold.
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$alli
\end_layout

\end_inset

f$alli function evaluates to non-zero, and an all-in control is present
 (slider/Swag box/allin-button), then move all-in .
\end_layout

\begin_layout Enumerate
Else if one of the betpot-functions (f$betpot_2_1, f$betpot_1_1, ..
 f$betpot_1_4) is true then press the correspondenting betpot-button (and
 maybe the raise-button afterwards, depending on your casinos tablemap)
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$betsize
\end_layout

\end_inset

 f$betsize function evaluates to non-zero, and an input box is present,
 then adapt the betsize according to a casino-specific input method, enter
 the result and confirm the bet.
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$rais
\end_layout

\end_inset

f$rais function evaluates to non-zero, and the Raise button is present,
 then click the Raise button 
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$call
\end_layout

\end_inset

f$call function evaluates to non-zero, and the Call button is present, then
 click the Call button 
\end_layout

\begin_layout Enumerate
Else if the f$check function is true and the 
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Check
\end_layout

\end_inset

Check button is present, then click the Check button 
\end_layout

\begin_layout Enumerate
Else if the f$fold function is true and the Fold button is present, then
 click the Check button 
\end_layout

\begin_layout Standard
To determine when and which action to take the Autoplayer performs the following
 actions:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="75text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle f$sitin, f$sitout and f$leave and f$close
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate the f$sitin, f$sitout, f$leave and f$close functions and take action
 depending on their return values.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index idx
status open

\begin_layout Plain Layout
spam
\end_layout

\end_inset

spam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate any i86 regions, and dismiss any 
\begin_inset Index idx
status open

\begin_layout Plain Layout
popup
\end_layout

\end_inset

popups/spam .
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$prefold
\end_layout

\end_inset

f$prefold
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$prefold evaluates to non-zero, then engage the prefold button as defined
 in the Table Map.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$rebuy
\end_layout

\end_inset

 f$rebuy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$rebuy evaluates to non-zero and the rebuy-conditions specified in the
 preferences are met, then execute an external rebuy-script.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$chat
\end_layout

\end_inset

f$chat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$chat evaluates to non-zero and safety constraints have been met, then
 enter a chat message into the chat box as defined in the Table Map.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index idx
status open

\begin_layout Plain Layout
isfinalanswer
\end_layout

\end_inset

Isfinalanswer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determine the value of the isfinalanswer symbol --- if the Iterator has
 finished, at least one action button is visible, we are “playing”, the
 number of sequential stable frames have been seen and the time value in
 
\begin_inset Index idx
status open

\begin_layout Plain Layout
f$delay
\end_layout

\end_inset

f$delay has passed, then isfinalanswer is true.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate primary functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f$alli, f$betpot..., f$betsize, f$rais, f$call, f$check, f$fold are evaluated
 and action taken based on the above logic.
 Use the if-then-else logic as described above to take the appropriate Autoplaye
r action.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
The Bot Logic (OH-script)
\end_layout

\begin_layout Subsection
\begin_inset Index idx
status open

\begin_layout Plain Layout
OH
\end_layout

\end_inset

OH-Script
\end_layout

\begin_layout Standard
Every bot needs some poker-specific logic to decide how to act.
 OpenHoldem provides a basic scripting-langugae for that, which was inherited
 from WinHoldem.
 The logic is action-centered, i.e.
 everytime it is your turn the following basic questions have to be answered:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I go allin?
\begin_inset Quotes erd
\end_inset

 --- f$alli (boolean, interpreting 0 as false and everything else as true)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I raise, and how much?
\begin_inset Quotes erd
\end_inset

 --- f$betsize 
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I (min-)raise
\begin_inset Quotes erd
\end_inset

 --- f$rais (mainly for Fixed Limit; boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I call
\begin_inset Quotes erd
\end_inset

 --- f$call (boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I check
\begin_inset Quotes erd
\end_inset

 --- f$check (boolean)
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

shall I fold
\begin_inset Quotes erd
\end_inset

 --- f$fold (boolean)
\end_layout

\begin_layout Standard
Per default f$check and f$fold evaluate to true, so if all questions were
 answered with 0 or false, your hand-will be check-folded.
 
\end_layout

\begin_layout Standard
Every bot needs such a formula file, even if it is programmed in 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Perl
\end_layout

\end_inset

Perl or 
\begin_inset Index idx
status open

\begin_layout Plain Layout
DLL
\end_layout

\end_inset


\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
C++
\end_layout

\end_inset

C++.
 There are no standalone Perl- or C++-bots; Perl and C++ are only programming
 extensions that make it possible to extend the functionality of OpenHoldem
 by providing additional symbols (constants and parameter-less functions).
 The very minimum is a small OH-script that redirects every primary function
 to a Perl- or C++-function.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$note##
\end_layout

\begin_layout Plain Layout

// Very small OH-formula, that redirects 
\end_layout

\begin_layout Plain Layout

// primary functions to Perl- or C++-functions.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$alli##
\end_layout

\begin_layout Plain Layout

dll$alli
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$swag##
\end_layout

\begin_layout Plain Layout

dll$swag
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$rais##
\end_layout

\begin_layout Plain Layout

pl_rais
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$call##
\end_layout

\begin_layout Plain Layout

pl_call
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In practice formulas can become arbitary complex, but those are the basic
 principles you will need to understand.
 We will deal with the details of bot-programming in the chapter about OH-script.
\end_layout

\begin_layout Subsection
Parse-Time and Run-Time Errors 
\end_layout

\begin_layout Standard
The OpenHoldem scripting language will detect various error conditions for
 you and warn you of these conditions.
 Each time a formula is loaded, it is “parsed” for correctness – if there
 are any syntactical errors upon this parse, then a message box will be
 displayed that alerts you to the location of this error.
\end_layout

\begin_layout Standard
Additionally, several classes of run-time errors will be detected, including
 divide-by-zero and infinite recursion.
 Note that the OH-Script language does not support recursion in any form,
 due to the absence of the assignment operator and function parameters to
 control the recursion depth.
\end_layout

\begin_layout Subsection
\begin_inset Index idx
status open

\begin_layout Plain Layout
Default bot
\end_layout

\end_inset

Default Bot
\end_layout

\begin_layout Standard
OpenHoldem does not contain a default bot.
 For some time we included 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Playbot
\end_layout

\end_inset

Playbot by Matrix just for demonstration purposes.
 It was a very early case-study about prwin-based bots, meant for Fixed
 Limit Texas Hold'em.
 Prwin-based bots (short for 
\begin_inset Quotes eld
\end_inset

probability of win
\begin_inset Quotes erd
\end_inset

) try to code the decision with very few and small mathematical formulae,
 unlike scenario-based bots that code hundreds or thousands of different
 situations.
 However the golden times of fixed limit are over and most people want to
 develop their own bots anyway.
 Due to the existence of countless demo-bots and the rise of OpenPPL we
 decided that a default bot-logic is no longer necessary.
\end_layout

\begin_layout Section
The Bot Logic (OpenPPL)
\end_layout

\begin_layout Standard
Since version 7.0 OpenHoldem provides an alternative way to program the bot-logic
: OpenPPL.
 PPL = Poker Programming Language, an english-like programming languge once
 designed by Shanky BonusBots.
 OpenPPL is completely integrated and can be mixed with OH-script if desired.
 Once a f$prteflop function is presdent OpenHoldem will switch to OpenPPLßmode
 and evaluate f$preflop, f$flop, f$turn and f$river instead of the OH-script
 autoplayer-functions.
 For the details please refer to the separate OpenPPL-manual.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$preflop##
\end_layout

\begin_layout Plain Layout

WHEN hand$AA RaiseMax FORCE
\end_layout

\begin_layout Plain Layout

WHEN hand$KK and Raises = 0 and calls = 0 RaiseTo 3 FPRCE
\end_layout

\end_inset


\end_layout

\end_body
\end_document
