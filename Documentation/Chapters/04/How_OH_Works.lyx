#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
How OpenHoldem Operates
\end_layout

\begin_layout Section
\begin_inset Index
status open

\begin_layout Plain Layout
Connecting
\end_layout

\end_inset

Connecting to a table
\end_layout

\begin_layout Standard
The “Green Circle Button” on the OpenHoldem toolbar is the usual way that
 one connects an OpenHoldem instance to a poker window.
 This is done automagically, however an explanation of what happens behind
 the scenes is useful if you have problems connecting to your target poker
 window.
 The following steps are taken to identify which windows on your screen
 are valid poker tables.
\end_layout

\begin_layout Enumerate
A list of all visible top level windows that have a non-blank caption is
 collected
\end_layout

\begin_layout Enumerate
Each window in this list is compared against each Table Map that you have
 placed in your 
\begin_inset Index
status open

\begin_layout Plain Layout
Scraper directory
\end_layout

\end_inset

“scraper” directory.
 For each step that follows, if a non-match is detected, OpenHoldem will
 then immediately move on to the next window/Table Map.
\end_layout

\begin_layout Enumerate
The size of the client portion of the window is compared to the clientsize
 records in the Table Map.
 The window is considered a match if the 
\begin_inset Index
status open

\begin_layout Plain Layout
Table Map
\end_layout

\end_inset

Table Map indicates the correct size as given by the record 
\begin_inset Index
status open

\begin_layout Plain Layout
Clientsize
\end_layout

\end_inset

clientsize, or if the size is within the size limits given by clientsizemin
 and clientsizemax.
\end_layout

\begin_layout Enumerate
The window’s title text is compared to the keyword text filters provided
 by 
\begin_inset Index
status open

\begin_layout Plain Layout
Titletext
\end_layout

\end_inset

titletext records in the Table Map.
 The window is considered a match if the free-form text in any of the titletext
 records is found in the window’s title.
 Additionally, if any !titletext records are present in the Table Map, then
 a window is considered a non-match if the free-form text in any of the
 !titletext records is found in the window’s title.
 
\end_layout

\begin_layout Enumerate
Any 
\begin_inset Index
status open

\begin_layout Plain Layout
Tablepoint
\end_layout

\end_inset

tablepoint records that exist in the Table Map are then the compared to
 the window’s pixels.
 If the color of any pixel does not match its tablepoint record then the
 window is considered a non-match.
 
\end_layout

\begin_layout Standard
In summary, OpenHoldem will connect to a window if it matches the client
 size, title text and pixel colors as specified in a Table Map.
\end_layout

\begin_layout Section
The 
\begin_inset Index
status open

\begin_layout Plain Layout
Heartbeat cycle
\end_layout

\end_inset

Heartbeat Cycle 
\end_layout

\begin_layout Standard
Once OpenHoldem has been connected to a table, it will enter into a continuous
 loop that performs a variety of actions.
 The cycle of these actions is described here in order of their execution.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features>
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="75text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scrape window
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ask the screen 
\begin_inset Index
status open

\begin_layout Plain Layout
Scraper
\end_layout

\end_inset

scraper engine to scrape and interpret the current pixels on the poker window
 based on the parameters in the loaded Table Map {Creating a Table Map}.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scraper preprocessor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a 
\begin_inset Index
status open

\begin_layout Plain Layout
Scraper Preprocessor DLL
\end_layout

\end_inset

Scraper Preprocessor DLL is loaded, then execute a textual preprocessing
 for the input from the scraper; this is meant mainly for casinos, which
 display non-numerical values, such as 
\begin_inset Quotes eld
\end_inset

pot: (150 + 300)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scraper override
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a 
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Scraper DLL
\end_layout

\end_inset

Scraper Override DLL
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Scraper-Override-DLL"

\end_inset


\end_layout

\end_inset

 is loaded, then pass the current screen scrape to that DLL for possible
 overrides {Scraper Override DLL}.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate symbols
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calculate all OpenHoldem symbols {Calculated Symbols}.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Create 
\begin_inset Index
status open

\begin_layout Plain Layout
Replay frames
\end_layout

\end_inset

replay frame
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a replay frame {Replay Frames} is requested in preferences {Preferences},
 create it now.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Validate game state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the 
\begin_inset Index
status open

\begin_layout Plain Layout
Validator
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Validator"

\end_inset

 is enabled in preferences {Preferences}, then validate the current game
 state.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Send state to user dll
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If a 
\begin_inset Index
status open

\begin_layout Plain Layout
User DLL
\end_layout

\end_inset

User DLL {User DLL} is loaded, then send the current game state to it.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Autoplay
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If the 
\begin_inset Index
status open

\begin_layout Plain Layout
Autoplayer
\end_layout

\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sec:The-Autoplayer"

\end_inset

 is engaged, then ask the Autoplayer to do its bit .
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wait
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sleep for the 
\begin_inset Index
status open

\begin_layout Plain Layout
Scrape delay
\end_layout

\end_inset

Scrape Delay period of time as specified in preferences {Preferences}, then
 start the next cycle.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
The 
\begin_inset Index
status open

\begin_layout Plain Layout
Autoplayer
\end_layout

\end_inset

Autoplayer
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Autoplayer"

\end_inset

 
\end_layout

\begin_layout Standard
OpenHoldem’s Autoplayer engine uses the following logic to decide what action
 to take on the poker window:
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Prefold?
\end_layout

\begin_layout Plain Layout
Rebuy?
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
If the 
\begin_inset Index
status open

\begin_layout Plain Layout
f$prefold
\end_layout

\end_inset

f$prefold function evaluates to non-zero, and a fold control is present,
 then fold.
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index
status open

\begin_layout Plain Layout
f$alli
\end_layout

\end_inset

f$alli function evaluates to non-zero, and an all-in control is present
 (slider/Swag box), then move all-in 
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index
status open

\begin_layout Plain Layout
f$swag
\end_layout

\end_inset

 (
\begin_inset Quotes eld
\end_inset

Swag
\begin_inset Quotes erd
\end_inset

 is a neologism by Ray E.
 Bornert II and means 
\begin_inset Quotes eld
\end_inset

stated wager
\begin_inset Quotes erd
\end_inset

) f$swag function evaluates to non-zero, and the Swag box is present, then
 enter the f$swag result into the Swag box and confirm the bet.
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index
status open

\begin_layout Plain Layout
f$rais
\end_layout

\end_inset

f$rais function evaluates to non-zero, and the Raise button is present,
 then click the Raise button 
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index
status open

\begin_layout Plain Layout
f$call
\end_layout

\end_inset

f$call function evaluates to non-zero, and the Call button is present, then
 click the Call button 
\end_layout

\begin_layout Enumerate
Else if the 
\begin_inset Index
status open

\begin_layout Plain Layout
Check
\end_layout

\end_inset

Check button is present, then click the Check button 
\end_layout

\begin_layout Enumerate
Else click the 
\begin_inset Index
status open

\begin_layout Plain Layout
Fold
\end_layout

\end_inset

Fold button
\end_layout

\begin_layout Standard
To determine when and which action to take the Autoplayer performs the following
 actions:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" width="25text%">
<column alignment="left" valignment="top" width="75text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Explanation
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index
status open

\begin_layout Plain Layout
f$play
\end_layout

\end_inset

f$play
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate the f$play function and take action depending on its return value
 .
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index
status open

\begin_layout Plain Layout
spam
\end_layout

\end_inset

spam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate any i86 regions, and dismiss any 
\begin_inset Index
status open

\begin_layout Plain Layout
popup
\end_layout

\end_inset

popups/spam .
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index
status open

\begin_layout Plain Layout
f$prefold
\end_layout

\end_inset

f$prefold
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$prefold evaluates to non-zero, then engage the prefold button as defined
 in the Table Map.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index
status open

\begin_layout Plain Layout
f$rebuy
\end_layout

\end_inset

 f$rebuy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$rebuy evaluates to non-zero and the rebuy-conditions specified in the
 preferences are met, then execute an external rebuy-script.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Handle 
\begin_inset Index
status open

\begin_layout Plain Layout
f$chat
\end_layout

\end_inset

f$chat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If f$chat evaluates to non-zero and safety constraints have been met, then
 enter a chat message into the chat box as defined in the Table Map.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Index
status open

\begin_layout Plain Layout
isfinalanswer
\end_layout

\end_inset

Isfinalanswer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determine the value of the isfinalanswer symbol --- if the Iterator has
 finished, at least one action button is visible, we are “playing”, the
 number of sequential stable frames have been seen and the time value in
 
\begin_inset Index
status open

\begin_layout Plain Layout
f$delay
\end_layout

\end_inset

f$delay has passed, then isfinalanswer is true.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evaluate primary functions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f$alli, f$swag, f$rais and f$call are evaluated take action based on the
 above logic.
 Use the if-then-else logic as described above to take the appropriate Autoplaye
r action.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
The bot logic
\end_layout

\begin_layout Subsection
\begin_inset Index
status open

\begin_layout Plain Layout
OH
\end_layout

\end_inset

OH-Script
\end_layout

\begin_layout Standard
The necessary are only primary functions, like f$alli, f$rais, f$call, etc.
 !!!
\end_layout

\begin_layout Standard
Each bot needs such a formula file, even if it is programmed in 
\begin_inset Index
status open

\begin_layout Plain Layout
Perl
\end_layout

\end_inset

Perl or 
\begin_inset Index
status open

\begin_layout Plain Layout
DLL
\end_layout

\end_inset


\begin_inset Index
status collapsed

\begin_layout Plain Layout
C++
\end_layout

\end_inset

C++.
 There are no standalone Perl- or C++-bots; Perl and C++ are only programming
 extensions, that make it possible to extend the functionality of OpenHoldem
 by providing additional symbols (constants and parameter-less functions).
 The very minimum is a small OH-script, that redirects every primary function
 to a Perl- or C++-function.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$note##
\end_layout

\begin_layout Plain Layout

// Very small OH-formula, that redirects 
\end_layout

\begin_layout Plain Layout

// primary functions to Perl- or C++-functions.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$alli##
\end_layout

\begin_layout Plain Layout

dll$alli
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$swag##
\end_layout

\begin_layout Plain Layout

dll$swag
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$rais##
\end_layout

\begin_layout Plain Layout

pl_rais
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

##f$call##
\end_layout

\begin_layout Plain Layout

pl_call
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset Index
status open

\begin_layout Plain Layout
Default bot
\end_layout

\end_inset

Default Bot
\end_layout

\begin_layout Standard
\begin_inset Index
status open

\begin_layout Plain Layout
Playbot
\end_layout

\end_inset

The OpenHoldem default bot is Playbot by Matrix.
 It is a very early case-study about prwin-based bots, meant for Fixed Limit
 Texas Hold'em.
 Prwin-based bots (short for 
\begin_inset Quotes eld
\end_inset

probability of win
\begin_inset Quotes erd
\end_inset

) try to code the decision with very few and small mathematical formulae,
 contrary to scenario-based bots, that code hundreds or thousands of different
 situations.
 Playbot despite its small size is able to value-bet, protect and control
 the pot-size with some bet-capping logic.
 Thus it is much better than the old WinHoldem-default-bot.
 But ofcourse it is no guaranteed money-maker at any level online.
\end_layout

\begin_layout Subsection
Parse-Time and Run-Time Errors 
\end_layout

\begin_layout Standard
The OpenHoldem scripting language will detect various error conditions for
 you, and warn you of these conditions.
 Each time a formula is loaded, it is “parsed” for correctness – if there
 are any syntactical errors upon this parse, then a message box will be
 displayed that alerts you to the location of this error.
\end_layout

\begin_layout Standard
Additionally, several classes of run-time errors will be detected, including
 divide-by-zero and infinite recursion.
 Note that the OH-Script language does not support recursion in any form,
 due to the absence of the assignment operator and function parameters to
 control the recursion depth.
\end_layout

\end_body
\end_document
