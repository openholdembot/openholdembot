#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset Index idx
status open

\begin_layout Plain Layout
Scraping
\end_layout

\end_inset

Scraping In Practice
\end_layout

\begin_layout Section
How Do I Make A Map
\end_layout

\begin_layout Standard
This tutorial has been contributed by Ares® at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.maxinmontreal.com/forums/viewtopic.php?f=117&t=6547
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
Here I will show you how I make a map from start to finish.
 I do not know if this is the right way, but this is what I do.
 At first we check the version to avoid any surürises if the casino updates.
 These casino updates rarely affect the table-display, but sometimes they
 do and throw the scraper off.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/01_version.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we choose proper settings amd disable useless features like avatars
 and animations that could affect scraping.
 I also enable other features that ease scraping, especially the four-colour-dec
k.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/02_settings.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then we choose a nice table-view, the simpler the better.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/03_table_view_selection.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is how our poker table looks with our preferred settings
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/04_table_with_settings.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Checking this table display, we notice some good things and also some possible
 problems to care about:
\end_layout

\begin_layout Itemize
fonts are two colors, we have to use pXname / uXname for the names and pXbalance
 / uXbalance for the balance.
 In similar cases we might consider to use the background-colour in combination
 with a negative radius to accept both foreground-colours at once, but here
 we have two different background-colours, therefore this alternative approach
 can hardly be used.
\end_layout

\begin_layout Itemize
the dealer button is large and well positioned 
\end_layout

\begin_layout Itemize
the cards are always exactly the same.
 Therefore we can use hashes, images or fuzzy fonts, but I will use hashes,
 as they are the most easy ones and the fastest.
 
\end_layout

\begin_layout Itemize
it might happen, that large chip-stacks occlude opponents card-backs.
\end_layout

\begin_layout Subsection
Scraping Cards
\end_layout

\begin_layout Standard
There are three methods to collect cards
\end_layout

\begin_layout Itemize
using hashes, i.e.
 using the image to compute a number and then doing a quick search for a
 match.
 This is the most simple method, but it requires that each card gets displayed
 exactly identically, at all times and at all possible places.
 We will ise hashes here, as Full-Tilt is a bot-friendly casino from a scraping
 point of view.
\end_layout

\begin_layout Itemize
using images.
 This approach is similar to the one above, but it requires more resources.
 This approach will be discussed in another chapter of this manual.
\end_layout

\begin_layout Itemize
using fuzzy fonts.
 This is 
\begin_inset Quotes eld
\end_inset

true screen-reading
\begin_inset Quotes erd
\end_inset

, somewhat more complicated, but it is possible to recognize cards that
 get displayed each time a little bit differently.
 Again we will discuss this method in another chapter.
\end_layout

\begin_layout Standard
So let's start with the card-scraping.
 We have 5 common-cards and 2 hole-cards in the situation below.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/05_starting_card_scraping.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see I pre-created 5 regions for the common cards, but in order
 to be able to define their size and position we have to care about my hole-card
s.
 One of them is partially occluded and we would like to recognize all cards
 with the same hashes, therefore this card defines the size of our scraping
 region.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

width  381 - 368 = 13
\end_layout

\begin_layout Plain Layout

height 431 - 395 = 36 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Please have a look at the region marked by arrow 3.The left border of the
 region matches the border of the card, but at the top is a free distance
 of one pixel.
 That's how we will align the regions for the common cards too.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/06_defining_size_of_regions_for_common_cards.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next step: we take the size of the card-scraping region (13x36) and apply
 it to the common cards.
 All regions now appear with the correct size.
 but in the upper left corner (0, 0), as the position is still undefined
 (please see the blue arrow).
 Now we select these regions and click-drag them to the right places
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/07_common_cards_aligned.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now the common-cards are done.
 Always make sure that we use the same alignment for all cards.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/08_common_cards_aligned_on_white_background.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we check the alignment of the common cards.
 All regions should have the same height.
 The space between two regions should be equal.
 If the position of the fourth card can change (Ipoker, CakePoker) we should
 use fuzzy fonts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/09_checking_alignment_of_common_cards.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
After I have aligned the common cards I will create and align the cards
 for all players.
 Once this got done, I will seek a play money table, the most loose one
 I can get.
 This is one of the secrets of quick TM creation; I already managed to get
 20 cards at once.
 So now I will create the regions p0cardface0 / p0cardface1.
 In OpenSrape I already created the region for the first player (player0).
 You can see that I chose the correct size of 13x36 and also chose hash0
 transform.
 Now I save the tablemap and close OpenScrape to clone these regions with
 an editor..
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/10_card_for_player0.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here I opened the file in a text editor.
 You can see the two regions that we created for the first player.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/11_p0cardfaceY_in_editor.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now I copy and paste the region's of the first player several times...
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/12_p0cardfaceY_in_editor_semi_cloned.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
...and rename the cloned ones, so that we get cardfaces for all 9 players (p0...p8).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/13_p0cardfaceY_in_editor_cloned.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
(On a side-note: cloning regions became more easy in the mean-time.
 Just create all regions for player0 and the balance-regions for all other
 players, plus the first common cards.
 Then click Menu → Edit → Clone Regions and all other regions will be created
 and even aligned to reasonable places.
 All you have to do is a little bit of fine-tuning the positions.)
\end_layout

\begin_layout Standard
In the next screenshot you see all cloned regions in OpenScrape, ready for
 positioning by drag and drop.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/14_clone_regions_ready_for_positioning.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\emph on
Be careful!
\emph default
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/15_new_version.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Today we received a gift from Ultimatebet.
 Their client has been updated, but it was only an update of internal functions,
 nothing that affected the user-interface.
 This is mostly the case with casino updates and one of the benefits of
 scraping: updates might happen often, but the interface changes rarely
 and mostly only slightly.
 But always be aware of updates.
\end_layout

\begin_layout Standard
Now let's continue with the good work: drag and drop.
 Select the region you want to move, in the example "p7cardface0".
 The region will be flashing in yellow.
 Press the "Shift" key, put the mouse pointer over the region, click and
 move the region to the desired place.
 placing conventions: player0 sits at 1-o-clocl-position, the other players
 are seated clockwise..
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/16_starting_drag_and_drop.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Do you notice the cards marked with arrows? They are not aligned properly.
 You can check this if you select them while they show cards.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/17_checking_alignment.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have to fine-tune these regions, so that all are aligned properly.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/18_checking_alignment_with_card_faces.jpg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/18_checking_alignment_with_card_faces_b.jpg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/18_checking_alignment_with_card_faces_c.jpg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/18_checking_alignment_with_card_faces_d.jpg

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/18_checking_alignment_with_card_faces_e.jpg

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Checking alignment again.
 Pay close attention; if one region is misaligned, all data collected from
 this region will be wrong.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/19_OS_with_aligned_cards.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we start collecting cards 
\end_layout

\begin_layout Enumerate
select the region 
\end_layout

\begin_layout Enumerate
click "Create Image" 
\end_layout

\begin_layout Enumerate
choose a good name like 
\begin_inset Quotes eld
\end_inset

8s
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
click "OK"
\end_layout

\begin_layout Standard
Repeat this process until all cards are collected.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/20_collecting_cards.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Creating hashes -- step 1
\end_layout

\begin_layout Enumerate
select image (8s) 
\end_layout

\begin_layout Enumerate
click "Creat Hash" 
\end_layout

\begin_layout Enumerate
select "Hash 0" 
\end_layout

\begin_layout Enumerate
click "OK"
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/21_creating_hashes.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Creating hashes -- step 2
\end_layout

\begin_layout Enumerate
Click Menu → Edit
\end_layout

\begin_layout Enumerate
Click Update Hashes
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/22_updating_hashes.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now OpenScrape already recognizes the card "8s"
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/23_OS_recognizing_8s.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the next step we would like to create the regions "pXbet", but the picture
 below shows an occlusion of "bets" by chip-stacks.
 Scraping the bet-amount is the preferred solution, as it is easy and doesn't
 utilize the CPU much.
 Unfortunately the occlusions prevents scraping the bet-amounts directly
 in our case.
 Therefore we have to use the alternative "chip scraping", i.e.
 recognizing and counting chip-stacks.
 We will use the regions pXchip00, pXchip01 and pXchip10 for players, i.e.
 the bottom chip of the left-most stack, the 2nd-chip in the same stack
 and the bottom-chip in the 2nd stack.
 All other chgip positions are then welldefined.
 The common pots work similar: c0potXchip00, c0potXchip01, c0potXchip10
 for pots.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
, 
\begin_inset Graphics
	filename images_how_to_create_a_map/24_bets_occluded_by_chips.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Chip scraping
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/25_chip_scraping.png

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The timer of player8 covers the chip-stack partially.
 Therefore I will reduce the size of the scraped region to 22x7.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/26_chips_occluded_by_timer.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then I open the TM in a text editor and pre-create the new regions, just
 like i did with the cards before.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/27_chips_precreated_in_TM.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The best place to align the pXchipXX regions is in blinds, because here
 we get to see often single chips.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/28_chip_scraping_blinds.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The chip should be collected as an image.
 The name of the picture must have a "$" at the beginning (examples: $0.01,
 $0.25, $1, $5, $100000)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/29_named_chips.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We will use hash points for recognizing chips, but not hash0 which is already
 in use, but this time hash1 to avoid potential hash-conflicts, even if
 they are very unlikely.
 We create these hash points with the "Graphical Hash Point Editor"Ö
\end_layout

\begin_layout Enumerate
click 
\emph on
Hash Points 
\end_layout

\begin_layout Enumerate
click 
\emph on
Edit 
\end_layout

\begin_layout Enumerate
select the hash type
\end_layout

\begin_layout Enumerate
select one chip image 
\end_layout

\begin_layout Enumerate
zoom to 16x
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/30_hash_point_editor.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see we created two new hash points of type "hash1" for this chip.
 Please note, that both points are at the side panel of the chip, which
 is always visible, even if the stack consists of multiple chips.
 We want OpenHoldem to be able to count them properly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/31_hash_points_created.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As it turned out both the $1 chip and the $1000 chip show the same white
 pixel at the formerly chosen hash-points (marked by arrows) This causes
 a hash collision and forces us to fine-tune the location of the points
 so that all chips can be properly recognized.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/32_hash_point_error_b.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we have to care about the location of additional chip stacks.
 As you can see they can grow in different directions for different playewrs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/33_direction_of_additional_chip_stacks.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This determines the placement of our chip regions.
 pXchip00 is always the first chip, pXchip01 is always on top of that and
 pXchip10 is the bottom chip of the second chip stack.
 OpenHoldem is then able to detect all other chip-stacks and all additional
 chips on top automatically.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/34_direction_of_additional_chip_stacks_explained.jpg

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here you cann see the pXchipYZ aligned in OpenScrape.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/35_chips_aligned_at_white_OS.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we have a nearly working tablemap.
 It recognizes cards and bets.
 Names are optional and only necessary for PokerTracker and other kinds
 of opponent modelling.
 The balances are also necessary, they can be done with font-scraping, which
 will be discussed in another chapter.
 We are nearly finished now, but to make use of this fine map we have to
 tell OpenHoldem how to recognize to a table.
 This happens by table-size and title-string (and in some rare cases by
 optional table-points, if different game-types (6max / 10max) can't be
 played with the same map.
\end_layout

\begin_layout Standard
So first we have to define the symbol 
\emph on
clientsize.
 
\emph default
The necessary value gets provided by OpenScrape.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/36_clientsize.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next we have to define a titletext.
 It should be unique for each casino (at least if other casinos have the
 same table size), but it should match all game-types that are supported
 by our map.
 Our map supports NL, FL and PL, which share the string "Holdem", so we
 choose this one as a tilte identifier.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/37_casino_titles.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
titletext 
\emph default
is a symbol-record that can be defined easily with the tablemap editor.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/38_defining_titlestring.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We also have to tell the scraper how many chairs the tablemap supports.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/39_defining_nchairs.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As you can see in the title OpenHoldem is connected to the table (and the
 map would work if we also defined which chair is seated).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/40_connected.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now we also need common pots (this includes side-pots).
 They work similar to bets and chip-stacks.
 Here c0potXchip00, c0potXchip01 and c0potXchip10.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/41_common_pots.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most sites have three 3 pots, but Ultimatebet has five potshas 5 pots (the
 fifth pot does not appear in the situation below, but we show its location)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename images_how_to_create_a_map/42_common_pots_again.jpg

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
