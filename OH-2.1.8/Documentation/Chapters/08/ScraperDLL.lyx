#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
\begin_inset Index
status open

\begin_layout Plain Layout
Scraper DLL
\end_layout

\end_inset

Scraper Override 
\begin_inset Index
status open

\begin_layout Plain Layout
DLL
\end_layout

\end_inset

DLL
\begin_inset CommandInset label
LatexCommand label
name "sec:Scraper-Override-DLL"

\end_inset


\end_layout

\begin_layout Standard
The scraper override DLL extension provides for a user-specified override
 of the output of the screen scraper engine.
 Sometimes, better game state information can be retrieved from poker client
 controls that are not scrapable by the pixel-driven scraper engine in OpenHolde
m, such as by parsing the chat box.
 Parsing the chat box would require direct memory reading of the poker client,
 or DLL injection.
 The approach for such a chat box parsing is beyond the scope of this document,
 but a good discussion on the topic can be found on CodingTheWheel (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.codingthewheel.com/archives/how-i-built-a-working-online-poker-bot-7
\end_layout

\end_inset

): 
\end_layout

\begin_layout Standard
Immediately after the screen scrape is complete, OpenHoldem will pass a
 pointer to a structure containing the results of the scrape to your override
 DLL.
 This is not a const pointer reference, so any of the members of the struct
 can be changed directly.
 The prototype for the method called by OpenHoldem is quite straightforward:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
SCRAPERDLL_API void OverrideScraper(SScraperState *state);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
No casting required.
 The members of the SScraperState struct are as follows:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
struct SScraperState 
\end_layout

\begin_layout Plain Layout
{ 
\end_layout

\begin_layout Plain Layout
    char title[512];
\end_layout

\begin_layout Plain Layout
    unsigned int card_common[5]; 
\end_layout

\begin_layout Plain Layout
    unsigned int card_player[10][2]; 
\end_layout

\begin_layout Plain Layout
    unsigned int card_player_for_display[2]; 
\end_layout

\begin_layout Plain Layout
    bool dealer[10]; 
\end_layout

\begin_layout Plain Layout
    bool sitting_out[10]; 
\end_layout

\begin_layout Plain Layout
    CString seated[10]; 
\end_layout

\begin_layout Plain Layout
    CString active[10]; 
\end_layout

\begin_layout Plain Layout

    
\lang english
CString name[10]; 
\end_layout

\begin_layout Plain Layout
    double balance[10]; 
\end_layout

\begin_layout Plain Layout
    bool name_good_scrape[10]; 
\end_layout

\begin_layout Plain Layout
    bool balance_good_scrape[10]; 
\end_layout

\begin_layout Plain Layout
    double bet[10]; double pot[10]; 
\end_layout

\begin_layout Plain Layout
    CString button_state[10]; 
\end_layout

\begin_layout Plain Layout
    CString i86X_button_state[10]; 
\end_layout

\begin_layout Plain Layout
    CString i86_button_state; 
\end_layout

\begin_layout Plain Layout
    CString button_label[10]; 
\end_layout

\begin_layout Plain Layout
    double sblind; 
\end_layout

\begin_layout Plain Layout
    double bblind; 
\end_layout

\begin_layout Plain Layout
    double bbet; 
\end_layout

\begin_layout Plain Layout
    double ante; 
\end_layout

\begin_layout Plain Layout
    LimitType limit; 
\end_layout

\begin_layout Plain Layout
    double handnumber; 
\end_layout

\begin_layout Plain Layout
    bool istournament; 
\end_layout

\begin_layout Plain Layout
};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any of these can be changed like so (which will give you four-of-a-kind
 Aces)
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SCRAPERDLL_API void OverrideScraper(SScraperState *state) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

    state->card_common[0] = StdDeck_MAKE_CARD(
\end_layout

\begin_layout Plain Layout

        StdDeck_Rank_ACE,     StdDeck_Suit_HEARTS); 
\end_layout

\begin_layout Plain Layout

    state->card_common[1] = StdDeck_MAKE_CARD(
\end_layout

\begin_layout Plain Layout

        StdDeck_Rank_ACE, StdDeck_Suit_DIAMONDS); 
\end_layout

\begin_layout Plain Layout

    state->card_common[2] = StdDeck_MAKE_CARD(
\end_layout

\begin_layout Plain Layout

        StdDeck_Rank_ACE, StdDeck_Suit_SPADES); 
\end_layout

\begin_layout Plain Layout

    state->card_common[3] = StdDeck_MAKE_CARD(
\end_layout

\begin_layout Plain Layout

        StdDeck_Rank_ACE, StdDeck_Suit_CLUBS); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And on return, OpenHoldem will instantly use the changed values instead
 of the scraped values.
\end_layout

\end_body
\end_document
