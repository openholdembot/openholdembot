#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
\begin_inset Index
status collapsed

\begin_layout Plain Layout
Scraper DLL
\end_layout

\end_inset

Scraper-Preprocessor 
\begin_inset Index
status collapsed

\begin_layout Plain Layout
DLL
\end_layout

\end_inset

DLL
\begin_inset CommandInset label
LatexCommand label
name "sec:Scraper-Prepreprocessor-DLL"

\end_inset


\end_layout

\begin_layout Standard
The scraper-preprocessor DLL extension was added in OH 2.1.0.
 Some casinos have started displaying unusual information in various regions
 that do not have an obvious way to be handled with the current OH design,
 other than scraper override.
 One casino, for example, displays pots like this "150 + (300)".
 "150" is the amount that is committed to the pot in previous rounds, and
 "+ (300)" is the amount that has been bet by players so far in this round.
 Scraper override is intended to be used with DLL injection or chat box
 parsing techniques, and what is needed here is a way to massage the transform
 engine's output before it gets converted internally into consumable numbers.
\end_layout

\begin_layout Standard
"scraper-preprocessor" works just like other user DLL extensions.
 It is different from scraper override, in that the string types that come
 out of the transform engine are passed to the DLL, rather than the final
 resultant types (doubles).
 This makes the interface very straightforward.
 The scraper engine will pass transformed strings to a user-coded DLL, the
 DLL can do whatever massaging is necessary, and then the engine will continue
 with what the DLL passes back for further processing.
 In the above example, the scraper-preprocessor DLL could be used to simply
 strip everything off of the scraped pot string after + or (.
 The engine would then get "150" back, which would then be processed into
 the correct double type.
 
\end_layout

\begin_layout Standard
Immediately after transforming each region, OpenHoldem will pass a pointer
 to a structure containing the results of the scrape to your override DLL.
 This is not a const pointer reference, so any of the members of the struct
 can be changed directly.
 The prototype for the method called by OpenHoldem is quite straightforward:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
SCRAPER_PREPROCESSOR_DLL_API void ProcessMessage(const char *message, const
 void *param);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

message
\begin_inset Quotes erd
\end_inset

 parameter will contain the name of the region that was just transformed.
 Using our example above for the strange pot, this could be 
\begin_inset Quotes eld
\end_inset

c0pot0
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

param
\begin_inset Quotes erd
\end_inset

 parameter will contain the actual transformed string, as a pointer to a
 CString type.
 Continuing the example above, this would be 
\begin_inset Quotes eld
\end_inset

150 + (300)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Handling this strange pot format could be as easy as code like this:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
SCRAPER_PREPROCESSOR_DLL_API void ProcessMessage(const char *message, 
\end_layout

\begin_layout Plain Layout

    
\lang english
const void *param) 
\end_layout

\begin_layout Plain Layout
{ 
\end_layout

\begin_layout Plain Layout

    
\lang english
if (message==NULL) return;
\end_layout

\begin_layout Plain Layout

    
\lang english
if (strncmp(message, "connect", 7)==0) target_hwnd = (HWND *) param;
\end_layout

\begin_layout Plain Layout

    
\lang english
if (strncmp(message, "disconnect", 10)==0) target_hwnd = (HWND *) NULL;
\end_layout

\begin_layout Plain Layout

    
\lang english
if (strncmp(message, "c0pot0", 6)==0) 
\end_layout

\begin_layout Plain Layout

    
\lang english
{
\end_layout

\begin_layout Plain Layout

        
\lang english
CString *s = (CString *) param;
\end_layout

\begin_layout Plain Layout

        
\lang english
int index;
\end_layout

\begin_layout Plain Layout

        
\lang english
index = s->Find('('); 
\end_layout

\begin_layout Plain Layout

        
\lang english
if (index==0) s->Empty(); 
\end_layout

\begin_layout Plain Layout

        
\lang english
if (index>0) *s = s->Left(index-1);
\end_layout

\begin_layout Plain Layout

        
\lang english
index = s->Find('+'); 
\end_layout

\begin_layout Plain Layout

        
\lang english
if (index==0) s->Empty(); 
\end_layout

\begin_layout Plain Layout

        
\lang english
if (index>0) *s = s->Left(index-1);
\end_layout

\begin_layout Plain Layout

    
\lang english
} 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
