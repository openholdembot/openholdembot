#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter*
Building Symbols On Your Own
\end_layout

\begin_layout Standard
The philosophy of (standard) PPL is: provide poker-logical symbols, that
 can be used by any poker-playing person, no matter how much (or less) programmi
ng experience he has.
 Examples are e.g.
 MaxOpponentStackSize, StartingStackSize
\end_layout

\begin_layout Standard
However this approach has some drawbacks: it shifts all work to the developers
 and limits the users, who might need additional symbols for their bot-logic.
 Staying with the example above, they might need: SmallBlindStacksize, BigBlindS
tacksize, UTGStacksize, ..., ButtonStacksize, OpenRaiserStacksize, LimpRaiserStacks
ize, ThreeBetterStacksize, FlopCheckRaiserStacksize, TurnDonkerStacksize,
 etc.
 No matter how busy the development team is, they will never be able to
 satisfy all needs.
 Therefore OpenHoldems (and OpenPPLs) philosophy is slightly different:
 provide technical symbols like balance0..balance9 (the stacksizes for chair0..chair
9) and let the user figure out the rest.
 This way the end-user is far more flexible; however at the cost of a bit
 more work.
\end_layout

\begin_layout Standard
As an example we develop a symbol BigBlindStackSize.
 As a first step we need to know the chair of the big blind.
 Then as a second step we are able to return the stacksize for this chair.
 To solve the first problem we use the OpenHoldem symbol ac_dealposX which
 returns the deal-position of chair X.
 The big blind is (with the very rare exception of a missing small blind)
 always the second player to be dealt, so we search for a the chair, that
 got dealt as second player.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NEW SYMBOL BigBlindChair
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos0 = 2 RETURN 0 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos1 = 2 RETURN 1 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos2 = 2 RETURN 2 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos3 = 2 RETURN 3 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos4 = 2 RETURN 4 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos5 = 2 RETURN 5 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos6 = 2 RETURN 6 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos7 = 2 RETURN 7 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos8 = 2 RETURN 8 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos9 = 2 RETURN 9 FORCE
\end_layout

\begin_layout Plain Layout

    // Other cases should not happen
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN -1 FORCE
\end_layout

\begin_layout Plain Layout

End Symbol
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Having this information we can continue with the second step (the dull part).
 We RETURN the stacksize for the chair of the big blind, making use of Openholde
ms stacksize symbols balance0..balance9.
 As you can see it is possible to use OpenHoldem Symbols in your OpenPPL
 code.
 Of course - we nearly forgot to mention it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

New Symbol BigBlindStacksize
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 0 RETURN balance0 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 1 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 2 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 3 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 4 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 5 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 6 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 7 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 8 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

    WHEN BigBlindChair = 9 RETURN balance FORCE
\end_layout

\begin_layout Plain Layout

	// Other cases should not happen.
\end_layout

\begin_layout Plain Layout

	// But if you forget about "WHEN Others"
\end_layout

\begin_layout Plain Layout

	// there always is an implicit "RETURN -1 FORCE".
\end_layout

\begin_layout Plain Layout

	// OpenPPL adds it automatically.
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN -1 FORCE
\end_layout

\begin_layout Plain Layout

End Symbol
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You see: it is not that difficult to extend OpenPPL on your own.
 The possibilites are nearly endless.
 For the moment we skipped some details, but creating new symbols is self-explai
ning: each new symbol start with 
\begin_inset Quotes eld
\end_inset

NEW SYMBOL <Name>
\begin_inset Quotes erd
\end_inset

 and ends with 
\begin_inset Quotes eld
\end_inset

END SYMBOL
\begin_inset Quotes erd
\end_inset

.
 Inbetween is an (optionally open-ended) when-condition-sequence with return-sta
tements instead of actions.
 These symbol-definitions go to an extra-part of your code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Custom
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Handlists
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Symbols
\end_layout

\begin_layout Plain Layout

// All your symbol definitions belong here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Preflop
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's all.
 OpenPPL is easy.
\end_layout

\end_body
\end_document
