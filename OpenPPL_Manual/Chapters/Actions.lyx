#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter*
Actions
\end_layout

\begin_layout Standard
The main code sections of Open-PPL consist of when-conditions with actions.
 They look e.g.
 like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CUSTOM	 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

PREFLOP
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Openraising on the button
\end_layout

\begin_layout Plain Layout

WHEN (Raises = 0 and Calls = 0 and StillToAct = 2)
\end_layout

\begin_layout Plain Layout

    // Normal openraises
\end_layout

\begin_layout Plain Layout

    WHEN ((Hand = AA) or (Hand = KK)...) RAISE 3 FORCE
\end_layout

\begin_layout Plain Layout

    // Pushing according to Sklanky
\end_layout

\begin_layout Plain Layout

    WHEN (StackSize < 20 and ((Hand = ...) OR ...)) RAISEMAX FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
OpenPPL provides 3 kinds of actions:
\end_layout

\begin_layout Section
Actions with Fixed Betsize
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BET 3 FORCE
\end_layout

\begin_layout Plain Layout

RAISE 15 FORCE
\end_layout

\end_inset

The final betsize is measured in bigblinds, and not in dollars like for
 OpenHoldems f$betsize function, so it works independent of the limit or
 blind-level.
 The translator cares about that difference automatically.
\end_layout

\begin_layout Section
Actions with Relative Betsize
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BET 30% FORCE
\end_layout

\begin_layout Plain Layout

RAISE 70% FORCE
\end_layout

\end_inset

Here the betsize gets measured as a certain percentage of the pot (pot =
 common pot + all players bets + the amount to call).
\end_layout

\begin_layout Section
Fixed Actions
\end_layout

\begin_layout Standard
Examples look like
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BETMAX FORCE
\end_layout

\begin_layout Plain Layout

RAISEMAX FORCE
\end_layout

\begin_layout Plain Layout

AALLIN FORCE        // synonym for BetMax and RaiseMax, but no standard
 PPL
\end_layout

\begin_layout Plain Layout

BETPOT FORCE
\end_layout

\begin_layout Plain Layout

RAISEPOT FORCE
\end_layout

\begin_layout Plain Layout

BETHALFPOT FORCE
\end_layout

\begin_layout Plain Layout

RAISEHALFPOT FORCE
\end_layout

\begin_layout Plain Layout

BET FORCE          // min-bet (fixed limit)
\end_layout

\begin_layout Plain Layout

RAISE FORCE        // min-raise (fixed limit)
\end_layout

\begin_layout Plain Layout

CALL FORCE
\end_layout

\begin_layout Plain Layout

CHECK FORCE
\end_layout

\begin_layout Plain Layout

FOLD FORCE
\end_layout

\begin_layout Plain Layout

SITOUT FORCE
\end_layout

\end_inset

Contrary to standard PPL OpenPPL does not distinguish bets and raises.
 The generated OH-script-code looks exactly the same and OpenHoldem makes
 no difference anyway.
\end_layout

\begin_layout Section
Being strict: using 
\begin_inset Quotes eld
\end_inset

FORCE
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Every action in OpenPPL has to be terminated by the keyword 
\begin_inset Quotes eld
\end_inset

FORCE
\begin_inset Quotes erd
\end_inset

.
 For standard PPL this keyword was optional.
 If you left it out, it meant, that the bot continued to evaluate and finally
 fell back to the default logic.
 We deviated from that behaviour, as:
\end_layout

\begin_layout Itemize
in our opinion it does not make any sense to specify actions that have no
 effect.
\end_layout

\begin_layout Itemize
OpenPPL does not provide a default bot.
\end_layout

\begin_layout Section
Backup actions
\end_layout

\begin_layout Standard
It may happen, that a certain action is not available, e.g.
 you might want to raise by half the pot, but this is currently not possible,
 e.g.
 because your opponent made a large raise and half-pot would be less than
 the minimum.
 In such situations OpenPPL behaves in the following ways:
\end_layout

\begin_layout Itemize
betsize invalid (to less or too much (PotLimit or more than your balance)):
 betsize gets automatically adapted.
 This happens also to actions like RaisePot and RaiseHalfPot, that get executed
 with the f$betsize-function (formerly known as 
\begin_inset Quotes eld
\end_inset

f$swag
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
action can't be executed, because it is not possible, e.g.
 there might be no raise-button, because you can only call (allin) or fold.
 Here OpenPPL behaves in the following way:
\end_layout

\begin_deeper
\begin_layout Itemize
RaisePot if RaiseMax is not possible
\end_layout

\begin_layout Itemize
Raise(Min) if RaisePot or RaiseHalfPot is not possible
\end_layout

\begin_layout Itemize
Call if no Raise is possible
\end_layout

\begin_layout Itemize
Check if no Call is possible
\end_layout

\begin_layout Itemize
Fold if no Check is possible (default behaviour of OpenHoldem).
\end_layout

\begin_layout Standard
This deviates from standard PPL again.
 However we have the following reasons:
\end_layout

\begin_layout Itemize
OpenHoldem evaluates its technical functions in the order above (for details
 please refer to the OpenHoldem Manual).
\end_layout

\begin_layout Itemize
we believe, it is better to behave in a more conservative way if an error
 occurs.
 Most probably you don't want to push allin if you specify RaiseHalfPot
 as your desired action.
 With a min-raise you are probably more happy (less unhappy).
\end_layout

\end_deeper
\end_body
\end_document
