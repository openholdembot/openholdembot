#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Debugging Your Code
\end_layout

\begin_layout Standard
Why debugging? If you code your bot or if you watch it play you will for
 sure find situations where the play doesn't match your expectations.
 Sometimes you know immediatelly what you did wrong or at what place of
 the code you have to look for your error.
 But sometimes you don't know or it might even seem, that everything looks
 ok on your side.
 So you might want to look a little bit deeper - at your code and maybe
 even at the symbol library.
 Here in this chapter we will show you some techniques to locate the problem:
\end_layout

\begin_layout Section*
Working with the debug-tab
\end_layout

\begin_layout Standard
OpenHoldem provides a cool feature called the debug-tab.
 Just open the formula-editor (for OH-script), switch to the f$debug-section
 and then you can enter your expressions.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

= userchair
\end_layout

\begin_layout Plain Layout

= HaveTopPair
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here userchair is a native OpenHoldem symbol and HaveTopPair is an OpenPPL-symbo
l.
 So once you have entered the symbols in question click 
\begin_inset Quotes eld
\end_inset

Apply
\begin_inset Quotes erd
\end_inset

 to confirm your input and 
\begin_inset Quotes eld
\end_inset

Auto
\begin_inset Quotes erd
\end_inset

 to turn the evaluator on.
 OpenHoldem will evaluate your expressions and show you their values.
 Anything wrong with them?
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/debug_tab_pokerstars.JPG
	width 524pt
	height 366pt
	noUnzip

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/Pokerstars_NL_25.jpg
	width 527pt
	height 380pt
	noUnzip

\end_inset


\end_layout

\begin_layout Standard
Everything is correct with this screenshot.
 But if something is wrong, there might be several reasons:
\end_layout

\begin_layout Itemize

\emph on
incorrect input.
 
\emph default
Have a look at OpenHoldem's table display: everything ok?
\end_layout

\begin_layout Itemize

\emph on
a problem with your code (or with the symbol library):
\emph default
 a symbol like for example StillToAct depends on other symbols like dealposition
 and nchairsdealtleft.
 So if StillToAct was wrong you might put these symbols into the debug-tab
 to evaluate further until you find the problem.
\end_layout

\begin_layout Section*
Simulating positions
\end_layout

\begin_layout Standard
The debug-tab is a wonderful tool --- but: the problem happened at a live-table
 --- what can you do? There are two things you could try: Openholdem provides
 a tool called ManualMode.
 Here you can set up some situations to simulate your bot-logic.
 The other possibility: you could shoot so-called replay-frames, i.e.
 screenshots of the casino-table that get saved to the replay-directory
 in your bot-folder.
 Once the session is over you can load these frames with OHReplay.exe and
 connect OpenHoldem to OHReplay like a normal casino-table.
 And then you can work with the debug-tab as described above.
 Please refer to OpenHoldem's manual for a more detailed description of
 these tools.
\end_layout

\begin_layout Section*
Investigating log-files
\end_layout

\begin_layout Standard
Not satisfied with the play? You might also look at the autoplayer-log.
 It is stored in your bot-folder and named e.g.
 oh_0.log.
 OpenHoldem uses this file to not only store the action it took, but also
 the complete evaluation process.
 First locate your hand (you can identify it e.g.
 by the time, your cards, the hand-number, etc.).
 At first the log might look like a complete mess, but actually it is well
 structured: function names on the very left are higher-level functions;
 symbols that are more indented got called by these higher-level functions.
 So what you see below is actually an evaluation-tree:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

f$flop = -1000001.000 [Line 3/3]   
\end_layout

\begin_layout Plain Layout

   HaveStraightDraw = 0.000 [Line 2/2740]     
\end_layout

\begin_layout Plain Layout

      HaveOpenEndedStraightDraw = 0.000 [Line 10/2685]       
\end_layout

\begin_layout Plain Layout

         HaveStraight = 0.000 [Line 1/2735]         
\end_layout

\begin_layout Plain Layout

            nstraightfill = 3.000       
\end_layout

\begin_layout Plain Layout

         rankbits = 24770.000     
\end_layout

\begin_layout Plain Layout

      HaveDoubleGutshotDraw = 0.000 [Line 15/2286]   
\end_layout

\begin_layout Plain Layout

   HaveQuads = 0.000 [Line 1/2679]   
\end_layout

\begin_layout Plain Layout

      isfourofakind = 0.000   
\end_layout

\begin_layout Plain Layout

   BotsLastAction = -1000008.000 [Line 20/549]   
\end_layout

\begin_layout Plain Layout

      betround = 2.000     
\end_layout

\begin_layout Plain Layout

      ConstBetRoundPreflop = 1.000 [Line 1/194] 
\end_layout

\begin_layout Plain Layout

      me_re_MemBotsLastAction = 0.000   
\end_layout

\begin_layout Plain Layout

      Fold = -1000001.000 [Line 1/77] 
\end_layout

\begin_layout Plain Layout

      PrevActionWasAllin = 0.000 [Line 2/492] 
\end_layout

\begin_layout Plain Layout

         prevaction = 3.000 
\end_layout

\begin_layout Plain Layout

    PrevActionWasAllin = 0.000 [cached] 
\end_layout

\begin_layout Plain Layout

   Raise = -1000008.000 [Line 1/134]  
\end_layout

\begin_layout Plain Layout

   Raise = -1000008.000 [cached]  
\end_layout

\begin_layout Plain Layout

   Fold = -1000001.000 [cached]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Long story short:
\end_layout

\begin_layout Itemize
At the very top you see an OpenPPL main-function, here f$flop
\end_layout

\begin_layout Itemize
Below you see functions that get called by f$flop either directly or indirectly
\end_layout

\begin_layout Itemize
Functions that are indented once are directly called by f$flop.
 E.g HaveStraightDraw, HaveQuads, BotsLastAction
\end_layout

\begin_layout Itemize
Functions that are indented one level deeper are called by the function
 above them that was indented one level less, E.g.
 HaveStraightDraw calls HaveOpenEndedStraightDraw and HaveDoubleGutshotDraw.
\end_layout

\begin_layout Itemize
After the = you see the result of the function evaluation
\end_layout

\begin_layout Itemize
[Line 10/2685] means: the function returned the result at its tenth line,
 which is line 2685 in the file.
\end_layout

\begin_layout Itemize
[cached] means that the result already got calculated and the cached value
 gets reused.
\end_layout

\begin_layout Itemize
symbols without line information are built-in OpenHoldem symbols.
\end_layout

\begin_layout Standard
That's it, basically.
 We were a bit in a hurry when we wrote this paragraph.
 Any better explanation is very welcome.
\end_layout

\begin_layout Section*
Things To Watch Out For
\end_layout

\begin_layout Itemize

\emph on
Incorrect hand-reset: 
\emph default
Most symbols depend only on the state of the table (cards, players, etc.)
 and are quite reliable.
 However there are some symbols, that depend on previous game-states, like
 BettingAction-symbols; these symbols reset whenever a new hand starts.
 Also user-defined variables will lose their value if a hand-reset occurs.
 These hand-resets can be triggered by certain events, like a changing dealer-ch
air or disappearing community cards, depending on your hand-reset-method
 defined in the tablemap.
 Depending on your settings it might be that an occlusion of the table will
 cause a hand-reset for OpenHoldem.
 So watch out for messages like below in your log-file.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

2012-01-21 19:50:17 -
\end_layout

\begin_layout Plain Layout

************************************************************* 
\end_layout

\begin_layout Plain Layout

HAND RESET (num:  dealer: 0 cards: KhKd): PartyPoker Table ###### - NL Hold'em
 $1/$2 
\end_layout

\begin_layout Plain Layout

*************************************************************
\end_layout

\begin_layout Plain Layout

2012-01-21 19:50:17 - ROUND 1
\end_layout

\end_inset

If they appear in the middle of a hand, then you should revisit your hand-reset-
method.
\end_layout

\begin_layout Itemize

\emph on
Misread information: 
\emph default
Most problems (and most reported 
\begin_inset Quotes eld
\end_inset

bugs
\begin_inset Quotes erd
\end_inset

) are of the from 
\begin_inset Quotes eld
\end_inset

garbage in - garbage out
\begin_inset Quotes erd
\end_inset

.
 If OpenHoldem gets incorrect data from the scraper-engine (e.g.
 no seated players) then all further calculations by the symbol-engine and
 the evaluator will return bogus values.
 The reason is usually simple: a beginner with incorrect system settings
 or incorrect casino settings.
 Let us emphasize: Win2000 classic theme and all animations turned off are
 recommended, but not necessary.
 In pronciple you can scrape whatever configuration you like.
 However: if you use somebody else's tablemap, then you 
\emph on
have to
\emph default
 use exactly the same settings as the profile creator.
 So before you go crazy investigating log-files: have a look at basic OpenHoldem
 symbols: are they reasonable or plain wrong? And before you sit at a real-money
-table observe your bot and OpenHoldem's table-display for some time: does
 OpenHoldem recognize every game-state correctly? Don't get frightened:
 
\emph on
screenscraping is an easy and very flexible approach, that works great.
 But it requires some care from your side!
\end_layout

\begin_layout Section*
Using Flags
\end_layout

\begin_layout Standard
OpenHoldem provides a useful set of buttons with a number on it, from 0
 to 19 called flags.
 When an OH flag button is pressed then corresponding symbol (f0..f19) will
 be true.
 For example our code could look like the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN betround=2 AND (BotRaisedBeforeFlop OR f0) Raise 50% FORCE 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above line is true if the bot raised before the Flop or the flag 0 button
 has been pressed.
 This way you could simulate costom conditions in Manual Mode.
\end_layout

\end_body
\end_document
