#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter*
Things To Know
\end_layout

\begin_layout Standard
If you are a botter who used Shanky-PPL in the past there are some differences
 you should know about:
\end_layout

\begin_layout Section*
No default bot
\end_layout

\begin_layout Standard
OpenPPL does not provide a default 
\begin_inset Quotes eld
\end_inset

winning-bot
\begin_inset Quotes erd
\end_inset

, especially no built-in 
\noun on
doodle
\noun default
-profile like BonusBots.
 
\noun on
Doodle
\noun default
 simply is a copyrighted business-secret of Shanky and giving away the miracle
 million-dollar-maker to every single one of your opponents would be no
 joy, wouldn't it?
\end_layout

\begin_layout Section*
Plain text only
\end_layout

\begin_layout Standard
For the same reason there is no support for encrypted PPL-profiles.
 Our aim is to build an open-source botting-tool and not a marketing-platform
 for shady salesmen.
 Therefore OpenPPL is plain text only --- for profiles you own legally,
 or even better: for profiles you build on your own.
\end_layout

\begin_layout Section*

\emph on
No option settings.
\end_layout

\begin_layout Standard
Standard Shanky-PPL supports option settings to configure their build-in-default
 bot; at least that was the old way to do so, but nowadays most of these
 settings get overwritten by the profile and have no effect at all.
 As OpenPPL does not support a default bot these option settings have no
 effect and get ignored.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MakePotSizedPreFlopRaisesWhen = 6
\end_layout

\begin_layout Plain Layout

FoldToPre-FlopRaisesForAQAJsKQ = OFF
\end_layout

\begin_layout Plain Layout

FoldPost-FlopBelowTopPairToAnyBetOrRaise = OFF
\end_layout

\begin_layout Plain Layout

FoldToPost-FlopRaisesWithUnpairedBoardsFor = 2 
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Custom
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Preflop
\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Section*

\emph on
Cases matter (partially).

\emph default
 
\end_layout

\begin_layout Standard
OpenHoldem is case-sensitive - contrary to standard PPL.
 So upper- and lower-cases matter - at least for the translated code.
 The rules for your OpenPPL-code are more user-friendly and less rigid.
 There are basically 3 cases:
\end_layout

\begin_layout Itemize
Keywords like 
\begin_inset Quotes eld
\end_inset

WHEN
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

AND
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

RAISEMAX
\begin_inset Quotes erd
\end_inset

, etc.
 For keywords 3 different spellings are allowed: all upper-cases, all lower-case
s and reasonable mixes.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (Hand = AA) RAISEMAX FORCE
\end_layout

\begin_layout Plain Layout

When (Hand = AA) RaiseMax Force
\end_layout

\begin_layout Plain Layout

when (Hand = AA) raisemax force
\end_layout

\end_inset

For better readability we recommend to use only upper-cases for keywords.
\end_layout

\begin_layout Itemize
OpenPPL-symbols that are part of the library.
 They are case-insensitive and you can write them any way you want.
 The translator knows their correct spelling and is able to generate correct
 code automatically.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (StillToAct < 2) RAISE 3 FORCE
\end_layout

\begin_layout Plain Layout

WHEN (stilltoact < 2) RAISE 3 FORCE
\end_layout

\begin_layout Plain Layout

WHEN (sTiLlToAcT < 2) RAISE 3 FORCE
\end_layout

\end_inset

For better readability we recommend mixed cases like in the library and
 in this manual.
\end_layout

\begin_layout Itemize
OpenHoldem symbols.
 Native OpenHoldem symbols are case-sensitive and always lower-cases.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (pt_vpip0 < 10) FOLD FORCE
\end_layout

\begin_layout Plain Layout

WHEN (balance0 < 50) RAISEMAX FORCE
\end_layout

\end_inset

However: you will probably use these symbols very rarely in your code.
 Probably only to create poker-logical symbols like PT_OpenRaiser_VPIP and
 BigBlindStackSize.
\end_layout

\begin_layout Section*
OpenPPL needs lots of brackets
\end_layout

\begin_layout Standard
Without them the converter worked only 98% of the time.
 It managed to translate everything, except the most simple cases (of course).
 In detail:
\end_layout

\begin_layout Itemize

\emph on
When-conditions need brackets
\emph default
.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (StackSize < 10 AND Raises >= 2) RAISEMAX FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Hand- and board-expressions need brackets.
\emph default

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN (Hand = AA) RAISEMAX FORCE
\end_layout

\begin_layout Plain Layout

WHEN (StackSize < 10 AND (Hand = AK) AND Raises >= 2) RAISEMAX FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\emph on
Not-expressions with equality operators need brackets
\emph default
.
 In boolean logic the expression
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NOT (a = b)
\end_layout

\end_inset

 is always semantical identical to
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(NOT a) = b
\end_layout

\end_inset

However there are 2 problems:
\end_layout

\begin_deeper
\begin_layout Itemize
it is impossible to support the Shanky-semantics of programming here, as
 a and b can be more complex expressions in OpenPPL and then it would be
 completely undefined to which sub-expression the not-operator should bind
 to.
\end_layout

\begin_layout Itemize
if a and b are no boolean values (true / false), but numbers, like in 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NOT StillToAct = 5
\end_layout

\end_inset

 then C++ / OpenPPL would first evaluate 
\begin_inset Quotes eld
\end_inset

NOT StillToAct
\begin_inset Quotes erd
\end_inset

 in a boolean context and make every non-zero value false (0) and zero true
 (1), which is probably not what you want.
\end_layout

\begin_layout Standard
Therefore we decided to stick to 
\begin_inset Quotes eld
\end_inset

normal
\begin_inset Quotes erd
\end_inset

 semantical rules and give the not-operator highest priority.
 You have 2 ways to get what you want:
\end_layout

\begin_layout Itemize
add brackets
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

NOT (StillToAct = 5)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
or use the inequality-operator (that is good maths and that is what Shanky
 really means with their somewhat crude logic)
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

StillToAct != 5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We are sorry for the confusion, but we had no other choice but to make it
 right here.
\end_layout

\end_deeper
\begin_layout Standard
However: things are not as bad as it may sound: if you have existing code
 (without the brackets), there is a tool to make it right --- bracketify.pl.
\end_layout

\begin_layout Itemize
Prerequisite: 
\begin_inset CommandInset href
LatexCommand href
name "ActiveState Perl"
target "http://www.activestate.com/activeperl/downloads"

\end_inset

 installed
\end_layout

\begin_layout Itemize
Usage: at the command prompt type: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

perl bracketify.pl < INPUTFILE.TXT > OUTPUTFILE.TXT
\end_layout

\end_inset

After that you will have a nice profile, with all necessary brackets added
 and a very nice to read layout.
 Ready for translation and for execution...
\end_layout

\end_body
\end_document
