#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Building Symbols On Your Own
\end_layout

\begin_layout Standard
The philosophy of (standard) PPL is: provide poker-logical symbols, that
 can be used by any poker-playing person, no matter how much (or less) programmi
ng experience they have.
 Examples are e.g.
 MaxOpponentStackSize, StartingStackSize
\end_layout

\begin_layout Standard
However this approach has some drawbacks: it shifts all work to the developers
 and limits the users, who might need additional symbols for their bot-logic.
 Staying with the example above, they might need: SmallBlindStacksize, BigBlindS
tacksize, UTGStacksize, ..., ButtonStacksize, OpenRaiserStacksize, LimpRaiserStacks
ize, ThreeBetterStacksize, FlopCheckRaiserStacksize, TurnDonkerStacksize,
 etc.
 No matter how busy the development team is, they will never be able to
 satisfy all needs.
 Therefore OpenHoldem's (and partially OpenPPLs) philosophy is slightly
 different: provide technical symbols like balance0..balance9 (the stacksizes
 for chair0..chair9) and let the user figure out the rest.
 This way the end-user is far more flexible; however at the cost of a bit
 more work.
\end_layout

\begin_layout Standard
As an example we develop a symbol BigBlindStackSize.
 As a first step we need to know the chair of the big blind.
 Then as a second step we will be able to return the stacksize for this
 chair.
 To solve the first problem we use the OpenHoldem symbol ac_dealposX which
 returns the deal-position of chair X.
 The big blind is (with the very rare exception of a missing small blind)
 always the second player to be dealt, so we search for a the chair, that
 got dealt as second player.
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$BigBlindChair##
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos0 = 2 RETURN 0 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos1 = 2 RETURN 1 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos2 = 2 RETURN 2 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos3 = 2 RETURN 3 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos4 = 2 RETURN 4 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos5 = 2 RETURN 5 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos6 = 2 RETURN 6 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos7 = 2 RETURN 7 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos8 = 2 RETURN 8 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN ac_dealpos9 = 2 RETURN 9 FORCE
\end_layout

\begin_layout Plain Layout

    // Other cases should not happen
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN -1 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Having this information we can continue with the second step (the dull part).
 We return the stacksize for the chair of the big blind, making use of OpenHolde
m's stacksize symbols balance0..balance9.
 As you can see it is possible to use OpenHoldem Symbols in your OpenPPL
 code.
 Of course - we nearly forgot to mention it.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$BigBlindStacksize##
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 0) RETURN balance0 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 1) RETURN balance1 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 2) RETURN balance2 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 3) RETURN balance3 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 4) RETURN balance4 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 5) RETURN balance5 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 6) RETURN balance6 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 7) RETURN balance7 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 8) RETURN balance8 FORCE
\end_layout

\begin_layout Plain Layout

    WHEN (BigBlindChair = 9) RETURN balance9 FORCE
\end_layout

\begin_layout Plain Layout

    // Other cases should not happen.
\end_layout

\begin_layout Plain Layout

    // But if you forget about "WHEN Others"
\end_layout

\begin_layout Plain Layout

    // there always is an implicit "RETURN 0 FORCE".
\end_layout

\begin_layout Plain Layout

    WHEN Others RETURN 0 FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You see: it is not that difficult to extend OpenPPL on your own.
 The possibilites are nearly endless.
 For the moment we skipped some details, but creating new symbols is self-explai
ning: each new symbol starts with a function header, that defines its name.
 The name of user-defined symbols traditionally begines with f$.
 For example ##f$BigBlindStacksize##.
 Thereafter follows the function's code, which usually is in a sequence
 of (optionally open-ended) when-conditions.
 These when-conditions usually define actions (in the case of f$preflop...
 f$river) or they contain return-statements like in the example above.
\end_layout

\begin_layout Standard

\emph on
That's all.
 OpenPPL is easy.
\end_layout

\begin_layout Section*
Advantages of Symbols
\end_layout

\begin_layout Standard
In our early versions of the manual we didn't talk about the advantages
 of structured code (especially functions AKA symbols), because they were
 too obvious for us.
 This caused some confusions for newbies.
 Symbols are great:
\end_layout

\begin_layout Itemize
to get understandable and self-documenting code (good naming; 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Information_hiding
\end_layout

\end_inset

) 
\end_layout

\begin_layout Itemize
to get reusabel code (named code-snippets) 
\end_layout

\begin_layout Itemize
to get small code (no code clones) 
\end_layout

\begin_layout Itemize
to get maintainable code (change and fix one location only) 
\end_layout

\begin_layout Itemize
to get fast code (because of OpenHoldem's symbol-caching: evaluates only
 once, use the value often) 
\end_layout

\begin_layout Itemize
to get readable log-files (because you see all the symbol-names and their
 values)
\end_layout

\begin_layout Itemize
...
\end_layout

\begin_layout Standard
So how often should you make use of symbols?
\end_layout

\begin_layout Standard

\emph on
All day.
 Everywhere.
 As much as possible.
 Enjoy them!
\end_layout

\end_body
\end_document
