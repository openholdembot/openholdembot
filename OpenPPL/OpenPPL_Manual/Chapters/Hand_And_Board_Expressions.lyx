#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter*
Hand And Board Expressions
\end_layout

\begin_layout Section*
Hand expressions
\end_layout

\begin_layout Standard
One of the most important decisions of the game happens preflop: shall I
 play this hand and how? This decision can be coded with the self-explaining
 hand-expression, like in the example below:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN hand$AA RAISEMAX FORCE
\end_layout

\begin_layout Plain Layout

WHEN hand$AQSuited OR hand$AJ Suited RAISETO 3 FORCE
\end_layout

\begin_layout Plain Layout

WHEN hand$22 OR hand$33 OR hand$44...
 CALL FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Remark*
AK does include both AKs and AKo.
 So if you want to play suited hands differently you should code them first,
 as OpenPPL gets evaluated top down.
 It will stop at the first condition that matches.
 So always remember: 
\emph on
strong hands first, exceptions first, bad hands later.
\end_layout

\begin_layout Section*
Coding For Specific Suits
\end_layout

\begin_layout Standard
If you want you can also code for specific suits, like an ace of diamonds
 in your hand.
 This is rarely necessary, but got used in the past (before real randomization
 go introduced to Standard PPL) to randomize actions.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

WHEN hand$AcQd Or hand$JhTs ...
\end_layout

\begin_layout Plain Layout

// Randomize your Action, the old way
\end_layout

\begin_layout Plain Layout

WHEN hand$AdT RAISE FORCE
\end_layout

\begin_layout Plain Layout

WHEN hand$AT CALL FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Section*
Board Expressions
\end_layout

\begin_layout Standard
A lot of the game also depends on the board cards.
 There are symbols like 
\begin_inset Quotes eld
\end_inset

HaveStraightDraw
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

FlushPossibleOnTurn
\begin_inset Quotes eld
\end_inset

, but for some cases they might be not concrete enough.
 Therefore it is possible to specify board-states similar as above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Calling, if any ace is on the board
\end_layout

\begin_layout Plain Layout

WHEN board$A CALL FORCE
\end_layout

\begin_layout Plain Layout

// Raising, if there is a low pair on board
\end_layout

\begin_layout Plain Layout

WHEN board$22 OR board$33 OR board$44...
 RAISE FORCE
\end_layout

\begin_layout Plain Layout

// Raising, if there are A and T of the same suit
\end_layout

\begin_layout Plain Layout

WHEN board$AT SUITED RAISEPOT FORCE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You see, this is pretty straight-forward, but sometimes lots of code to
 write.
 If you want to create code that is easy to understand, easy to reuse and
 easy to maintain, then you should encapsulate expressions like the second
 one in functions:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

##f$LowPairOnBoard##
\end_layout

\begin_layout Plain Layout

    WHEN board$22 OR board$33 OR board$44...
 RETURN TRUE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
User-defined variables would also be possible, but they are not nearly as
 good as functions.
\end_layout

\end_body
\end_document
