#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Hash Records
\end_layout

\begin_layout Subsection
Description 
\end_layout

\begin_layout Standard
The purpose of Hash Records is to allow for the rapid lookup of pixel patterns,
 without having to scan through each pixel in a region to find a match.
 For example, if we have a card region specified to use a “Hash0” transform,
 the screen scraper engine will first reduce the pixels in that region to
 a 32-bit hash value.
 (A link to Bob Jenkins’ hash algorithm that is used in this project can
 be found in the references section) Once the screen scraper engine has
 calculated the 32-bit hash value, it looks to see if there exists a matching
 32-bit value in the associated group of Hash Records, in this example,
 group 0.
 If a matching 32-bit hash value is found, the screen scraper engine returns
 the <name> of the Hash Record to the game state engine.
 
\end_layout

\begin_layout Subsection
Manipulating hash records using OpenScrape
\end_layout

\begin_layout Standard
Hash Records are created from specific Image records, so in order to create
 a Hash record, you must first have collected the associated Image record
 (see section {4.9}).
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/OS_editor_create_hash.JPG

\end_inset


\end_layout

\begin_layout Standard
The “Create Hash” buttons on the Table Map Editor window are used to create
 new Hash records.
 Button “0” creates Hash records in the Hash0 group, button “1” creates
 Hash records in the Hash1 group, and so on.
 These buttons are only available if an Image record has been selected in
 the tree display on the Table Map Editor window.
 
\end_layout

\begin_layout Standard
Note: Only one Hash record can exist in a Table Map in each hash group for
 any given Image record.
 Otherwise, there would be collisions, and the screen scraper engine would
 not know which Hash record was the correct match.
 In the “Create Hash Record buttons” screenshot above, Hash records for
 group 0 and 2 have already been created for the selected Image record,
 so those buttons are grayed out.
\end_layout

\begin_layout Standard
To create a new Hash records: 
\end_layout

\begin_layout Enumerate
Select an Image record 
\end_layout

\begin_layout Enumerate
Click the “Create Hash” button for the hash group that you want to create
 this Hash record in.
\end_layout

\begin_layout Standard
The following window will then appear to confirm the addition of the new
 Hash record: 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/OS_editor_hash_conformation.JPG

\end_inset


\end_layout

\begin_layout Standard
When you add a new Hash record with the “Create Hash” buttons, OpenScrape
 will calculate the hash value for you and add it to the record.
 (This is new behavior in 2.0; previous versions stored a zero hash value
 on new record creation) However, sometimes you may need to change that
 stored hash value, if for example, you replace the underlying Image record,
 or you change the number or location of the related Hash Points.
 If one or more hash values need to be updated, use the “Update Hashes”
 option on the Edit manu on the Main window, and the hash values on all
 Hash records will be re-calculated.
 Technical Reference In the Table Map (.tm) file, these records will be preceded
 with the characters "h$".
 Hash records have the following format: 
\end_layout

\begin_layout Standard
h<n>$<name> <value>
\end_layout

\begin_layout Standard
<n> is the group (1-3) that this hash record belongs to <name> is the string
 that is returned to the scraper engine upon a match (the “result”) <value>
 is a 32bit hexadecimal value that contains the calculated hash .
\end_layout

\end_body
\end_document
