#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
User-DLL
\end_layout

\begin_layout Standard
OpenHoldem has the ability to interface with a user-compiled DLL.
 Microsoft Windows provides a feature whereby running code can load other
 code, presuming that code is provided in the form of DLL files.
 OpenHoldem utilizes this Windows DLL feature to allow you to extend the
 functions within OpenHoldem to practically anything that you want, provided
 you can write the code for it and compile it.
 Generally, people who create DLLs write them in the C or C++, as those
 are the native historical target languages for using DLL functions, as
 defined by Microsoft.
 There are ways to have OpenHoldem use a C/C++ DLL shell which then calls
 code written in other languages, such as managed languages like .NET, but
 that topic is beyond the scope of this manual.
 If you are interested in doing this, there are plenty of programming forums
 on the Internet that can help with this activity.
\end_layout

\begin_layout Standard
OpenHoldem provides a number of preferences for how a user-DLL will be loaded.
 It can be done on start-up, when a formula is loaded, or manually.
 See the {Preferences} section for more information.
\end_layout

\begin_layout Standard
From this point on, the assumption is that, if you are creating a user-DLL,
 it will be written in the C or C++ languages.
 To do this, you need a C/C++ compiler – the express editions of Microsoft
 Visual Studio will suffice for this, as these user-DLLs typically do not
 need the MFC library, which is only present in the paid versions of Microsoft
 Visual Studio.
 A starting framework for a user-DLL can be found in the source code library
 on Google Code, but is also embedded just below this paragraph.
 See the {References} section for links.
\end_layout

\begin_layout Section
How OpenHoldem calls DLL functions 
\end_layout

\begin_layout Standard
The OpenHoldem to DLL interface is small and clean.
 OpenHoldem will send or request information from the DLL when needed, and
 it is up to the DLL’s author to process these requests.
 The exported library function process_message is used for this interface
 and has the following prototype:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
USERDLL_API double process_message (const char* pmessage, const void* param);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The various messages that can be passed in the “pmessage” parameter are
 as follows:
\end_layout

\begin_layout Standard
pmessage meaning and parameters state 
\end_layout

\begin_layout Standard
Each scrape cycle, OpenHoldem will send the current game state to the DLL.
 As the author of the DLL, you will decide what to do with this game state
 information.
 The game state information is stored in a structure within OpenHoldem,
 and a pointer to this structure is passed to your User DLL in the “param”
 parameter.
 An example of how to cast this void pointer to the game state structure
 is provided in the Reference User DLL source code.
 The details of what is included in this game state structure are in the
 header file in the Reference User DLL source code.
 
\end_layout

\begin_layout Subsection
query 
\end_layout

\begin_layout Standard
Any symbol that begins with the characters “dll$” is interpreted by the
 OpenHoldem parser as requiring a call to the loaded User DLL in order to
 determine its value.
 The “query” message is the mechanism for requesting the value of this symbol.
 Any symbol name can be created for use by your User DLL, as long as it
 begins with “dll$”, and your DLL code knows how to handle it.
 So, for example, if the OpenHoldem decision engine encounters a symbol
 called “dll$kill_phil” in the evaluation of the “f$alli” function, then
 a synchronous call will be made to the User DLL to provide the value of
 dll$kill_phil in order to complete the evaluation of f$alli.
 The evaluation of f$alli will block until your DLL handles this request
 and provides a result.
 The name of the symbol (in this case, “dll$kill_phil”) is provided in the
 “param” parameter, and should be cast to a (const char*).
 A simple example of how to process this message is provided in the Reference
 User DLL source code.
 
\end_layout

\begin_layout Subsection
pfgws 
\end_layout

\begin_layout Standard
Immediately after your User DLL is loaded, OpenHoldem will send a “pfgws”
 message once, which contains a pointer to a function within OpenHoldem
 that allows you to retrieve OpenHoldem symbols for use in your DLL code.
 “pfgws” is an acronym for “Pointer to Function for Get Winholdem Symbol”.
 This has not been renamed to something different for legacy compatibility
 reasons.
 The pointer to the OpenHoldem “get symbol” function is provided in the
 “param” parameter, and should be cast to the p_getsym_t typedef and stored
 in a variable provided by your DLL.
 From then on, any time your DLL needs to know the value of one of the OpenHolde
m calculated symbols, call this function.
 The Reference User DLL source code provides a function that shows how to
 use the parameter provided in this message.
 The prototype for this function is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
double getsym( int chair, const char* name, bool& iserr );
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This sample function takes the chair and the symbol name as input parameters
 and returns an error code in the “iserr” output parameter.
 An error will be returned if, for example, the “name” parameter contains
 an invalid OpenHoldem symbol name.
 event There are two event messages that are passed to your DLL.
 Both of these messages have NULL “param” parameters.
 “load” – this message is sent once immediately after your DLL is loaded.
 Typically this is used for some kind of initialization activity by your
 DLL.
 “unload” – this message is sent once just prior to OpenHoldem unloading
 your DLL from memory.
 This could be due to OpenHoldem shutdown, manual intervention from the
 DLL menu, or new formula loading.
 Typically this is used to clean up your DLL’s activities, such as connections
 to databases, closure of threads, etc.
 
\end_layout

\begin_layout Subsection
phl1k 
\end_layout

\begin_layout Standard
This message provides a pointer to OpenHoldem’s internal hand list array,
 for your DLL to read and modify as needed.
 The “param” parameter contains a pointer to this array and should be cast
 to the following type:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
bool inlist[1000][13][13];
\end_layout

\end_inset


\end_layout

\begin_layout Standard
OpenHoldem can store 1000 different hand lists, and the first dimension
 of this array specifies the hand list number, the second and third dimensions
 specify the rank of the first and second card, where rank0>=rank1 is interprete
d to mean suited cards, and rank0<rank1 is interpreted to mean unsuited
 cards.
 This is a very sparsely populated array, where the intersection of the
 three dimensions specifies if the particular card pair is present in the
 hand list or not.
 A non-zero value at this intersection indicates that the card pair is present;
 zero indicates that the card pari is not present.
 prw1326 This message provides a pointer to a prw1326 structure stored in
 OpenHoldem.
 This prw1326 structure is used to describe the manner in which OpenHoldem
 calculates its prwin, prtie and prlos symbols, based on the information
 which the DLL developer places in this structure.
 Unless the DLL code sets a specific enabling flag in this structure, the
 current prwin, prtie and prlos calculation is unchanged.
 Please see the {prw1326} section for more information.
\end_layout

\begin_layout Subsection
p_send_chat_message 
\end_layout

\begin_layout Standard
This message provides a pointer to a SendChatMessage function in OpenHoldem
 that allows you to send any chat message you want at any time.
 The OH-Script only version of f$chat only allows certain pre-defined chat
 messages to be sent.
 This message is sent once immediately after your DLL is loaded, with the
 pointer to the SendChatMessage function in the “Param” parameter.
 This parameter should be cast to the following prototype:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
void SendChatMessage(char* new_message);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usage of this function is specified in more detail in the {f$chat} section.
\end_layout

\begin_layout Subsection
Order of messages
\end_layout

\begin_layout Standard
The order that these messages are passed after the DLL is loaded is as follows:
 
\end_layout

\begin_layout Enumerate
event / load 
\end_layout

\begin_layout Enumerate
pfgws 
\end_layout

\begin_layout Enumerate
phl1k 
\end_layout

\begin_layout Enumerate
prw1326
\end_layout

\begin_layout Enumerate
p_send_chat_message
\end_layout

\begin_layout Standard
Note: Basic code examples for handling most of these DLL messages are provided
 in the Reference User DLL source code.
\end_layout

\begin_layout Standard
A Simple Example An easy way to get started is to override all OH-Script
 processing with DLL functions.
 There are a number of reasons to do this, including:
\end_layout

\begin_layout Itemize
Limitations of the OH-Script language (no assignments is the biggest limitation)
 
\end_layout

\begin_layout Itemize
Speed of compiled code versus interpreted code 
\end_layout

\begin_layout Itemize
Low level integration with other technologies (your own tracking database,
 for example)
\end_layout

\begin_layout Standard
To override all OH-Script processing, simply instruct each primary function
 to only have a call to a “dll$” symbol.
 For example, use the following code:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
##f$alli##
\end_layout

\begin_layout Plain Layout
dll$alli
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
##f$rais##
\end_layout

\begin_layout Plain Layout
dll$rais
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And so on.
 In your User DLL, handle each of these “dll$” symbols as described above.
 Now all of the decision logic has been moved from OH-Script code to code
 that you provide in your DLL.
 It is important to remember that even if you want to code up most of your
 bot logic in C/C++, you still must use the OpenHoldem primary functions
 themselves to call this logic.
\end_layout

\begin_layout Subsection
prw1326 
\end_layout

\begin_layout Standard
The prw1326 structure and associated individual chair structure have the
 following specification:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
//prwin 1326 chair structure 
\end_layout

\begin_layout Plain Layout
struct sprw1326_chair 
\end_layout

\begin_layout Plain Layout
{ 
\end_layout

\begin_layout Plain Layout
    int level;  // indicates weighting level 
\end_layout

\begin_layout Plain Layout
                // for 'always consider' 
\end_layout

\begin_layout Plain Layout
    int limit;  // max index into weight array  
\end_layout

\begin_layout Plain Layout
                // used for computational efficiency 
\end_layout

\begin_layout Plain Layout
    int ignore; // if non-zero no weighting will 
\end_layout

\begin_layout Plain Layout
                // be applied to this chair 
\end_layout

\begin_layout Plain Layout
    int rankhi[1326]; // higher ranked card number 
\end_layout

\begin_layout Plain Layout
                      // in pocket cards 
\end_layout

\begin_layout Plain Layout
    int ranklo[1326]; // lower ranked card number 
\end_layout

\begin_layout Plain Layout
                      // in pocket cards 
\end_layout

\begin_layout Plain Layout
    int weight[1326]; // the significance value for this hand 
\end_layout

\begin_layout Plain Layout
double scratch;   // for future reference
\end_layout

\begin_layout Plain Layout
};
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
//prwin 1326 structure 
\end_layout

\begin_layout Plain Layout
struct sprw1326 
\end_layout

\begin_layout Plain Layout
{ 
\end_layout

\begin_layout Plain Layout
    int useme; // unless set to 1326 the normal 
\end_layout

\begin_layout Plain Layout
               // OH prwin will be used 
\end_layout

\begin_layout Plain Layout
    int preflop; // unless set to 1326 the normal 
\end_layout

\begin_layout Plain Layout
                 // OH prwin will be used pre-flop 
\end_layout

\begin_layout Plain Layout
    int usecallback; // unless set to 1326 the callback 
\end_layout

\begin_layout Plain Layout
                     // function will not be invoked 
\end_layout

\begin_layout Plain Layout
    double (*prw_callback)(void); // if enabled will be 
\end_layout

\begin_layout Plain Layout
                                  // invoked before the 
\end_layout

\begin_layout Plain Layout
                                  // prwin calculation pass 
\end_layout

\begin_layout Plain Layout
    double scratch; // for future reference 
\end_layout

\begin_layout Plain Layout
    int bblimp; // if non-zero no weighting 
\end_layout

\begin_layout Plain Layout
                // will be applied if a chair has put 
\end_layout

\begin_layout Plain Layout
                // nothing in the pot 
\end_layout

\begin_layout Plain Layout
    sprw1326_chair vanilla_chair; // will be precalculated 
\end_layout

\begin_layout Plain Layout
                                  // by OH at startup.
 
\end_layout

\begin_layout Plain Layout
                                  // convenience values 
\end_layout

\begin_layout Plain Layout
    sprw1326_chair chair[10]; // structures for each chair 
\end_layout

\begin_layout Plain Layout
};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use the structure from a User DLL, the following would also need to be
 added:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
typedef sprw1326* pp13; pp13 prw1326;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also, in the process_message handling add:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
if (strcmp(pmessage,"prw1326")==0) { prw1326 = (pp13)param; return 0; }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
During OpenHoldem initialization the prw1326.vanilla_chair structure is set
 up so that .level is 1024, the .ranklo and .rankhi arrays contain the card
 order used for the normal OpenHoldem prwin calculation (but expanded from
 169 to 1326 format), the weighting of the high third of these cards is
 set to 1024, the middle third is sloped down from 1024 to zero, and .limit
 is set so that the final third are never even considered as possible opponent
 cards.
 The .vanilla_chair is then copied to each of the ten .chair structures.
 This should mean that even if the capability is activated by setting .useme
 to 1326, the prwin calculation will not crash and will give an anodyne
 weighted result.
 The vanilla_chair is not referenced or used by OpenHoldem other than at
 start-up, and could be altered and used by the DLL developer to act as
 a default profile for new players.
 
\end_layout

\begin_layout Standard
A more complete explanation of how the prw1326 approach works can be found
 in the {Weighted prwin} section.
 
\end_layout

\begin_layout Subsection
isfinalanswer 
\end_layout

\begin_layout Standard
isfinalanswer is a calculated symbol, designed for User-DLL developers,
 who want to make sure, that certain calculations get executed only once
 per turn.
 This symbols is true (non-zero) just prior to the Autoplayer acting, and
 false (zero) any other time.
 More precise, it is true exactly when
\end_layout

\begin_layout Itemize
it is your turn
\end_layout

\begin_layout Itemize
you see stable frames, i.e.
 when N scrapes is a row are identical (N is set in Edit->Preferences->Autoplaye
r->Frame Delay)
\end_layout

\begin_layout Itemize
dll$iswait is false (see below).
\end_layout

\begin_layout Subsection
dll$iswait 
\end_layout

\begin_layout Standard
Prior to the OpenHoldem Autoplayer taking action, it will query your User
 DLL, if one is loaded, for the value of dll$iswait.
 If this query returns non-zero, then OpenHoldem will not execute the Autoplayer
’s action this scrape cycle, but rather will skip the action and continue
 to the next screen scrape cycle.
 While dll$iswait returns non-zero, isfinalanswer will always be zero.
\end_layout

\begin_layout Standard
In the forum Matrix explained (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.maxinmontreal.com/forums/viewtopic.php?f=174&t=6885
\end_layout

\end_inset

):
\end_layout

\begin_layout Quotation
While dll$iwait is true you don't have to respond to formula requests.
 You do have to somehow make sure that by the time dll$iswait is true that
 OpenHoldem has been returned the correct result.
 When you go down this route you may encounter the problem of OpenHoldem
 stop evaluating the formulas, because there has been no change in state
 and dll$iswait is false.
 The best thing to do in this case is to disable all caching inside of OpenHolde
m and always return a valid formula result and set dll$iswait to false on
 the very first valid frame with buttons you see from OpenHoldem.
 
\end_layout

\begin_layout Subsection
cmd$recalc 
\end_layout

\begin_layout Standard
A User DLL also has the ability to send the request "cmd$recalc", which
 will force OpenHoldem to recompute the versus tables and restart the Iterator
 thread.
\end_layout

\begin_layout Standard
 
\end_layout

\end_body
\end_document
