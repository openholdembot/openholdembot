#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
\begin_inset Index
status open

\begin_layout Plain Layout
Mouse DLL
\end_layout

\end_inset

Mouse 
\begin_inset Index
status open

\begin_layout Plain Layout
DLL
\end_layout

\end_inset

DLL
\begin_inset CommandInset label
LatexCommand label
name "sec:Mouse-DLL"

\end_inset

 
\end_layout

\begin_layout Standard
The mouse DLL extension provides for a user-specified handling of mouse
 actions.
 The standard, reference mouse.dll that is shipped with OpenHoldem performs
 very un-human-like mouse activities.
 For example, instantly warping the mouse pointer to a location on the button
 and clicking is unlikely to be human behavior.
 A human is more likely to start the mouse moving, accelerate to the target,
 then decelerate as the pointer nears the position of the button.
 Simulating mouse movements that are more human-like may help to avoid detection
 by casions.
 
\end_layout

\begin_layout Standard
The mouse DLL extension is available if you would like to implement custom
 mouse action behavior.
 The source code for the reference mouse.dll implementation can be found
 on Google Code in the source code repository.
\end_layout

\begin_layout Standard
Two methods must be exposed in your mouse.dll in order to interface properly
 with OpenHoldem.
 
\end_layout

\begin_layout Standard
“MouseClick” is called when OpenHoldem wants to click a mouse button on
 a specific location on the screen.
 The prototype for the “MouseClick” method is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
MOUSEDLL_API int MouseClick(const HWND hwnd, const RECT rect, const MouseButton
 button, const int clicks, const HWND restore_focus, const POINT restore_cursor)
;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
“MouseClickDrag” is called when OpenHoldem wants to click a mouse button
 at a specific location on the screen, hold it, drag the cursor to another
 location, and then release it.
 Dragging is from rect.left to rect.right, halfway between rect.top and rect.bottom.
 The prototype for the “MouseClickDrag” method is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
MOUSEDLL_API int MouseClickDrag(const HWND hwnd, const RECT rect, const
 HWND restore_focus, const POINT restore_cursor);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features>
<column alignment="left" valignment="top" width="20text%">
<column alignment="left" valignment="top" width="80text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Parameter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hwnd (in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the HWND of the window to take the mouse action on
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rect (in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the bounding rectangle of the area to take action on – this generally correspond
s to a Table Map Region record rectangle, like those that define button
 click areas; this rectangle is in relative client context 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
button (in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the mouse button to be clicked, this is an enum:
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
enum MouseButton 
\end_layout

\begin_layout Plain Layout
{ 
\end_layout

\begin_layout Plain Layout

    
\lang english
MouseLeft, 
\end_layout

\begin_layout Plain Layout

    
\lang english
MouseMiddle, 
\end_layout

\begin_layout Plain Layout

    
\lang english
MouseRight 
\end_layout

\begin_layout Plain Layout
}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
clicks (in) 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the number of clicks of the specified button 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
restore_focus (in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
the HWND of the window to return focus, active and foreground to, after
 the action has been taken; if this is NULL, no focus resotre is requested
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
restore_cursor (in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a POINT to return the cursor to, after the action has been taken; if POINT.x
 and POINT.y are set to -1, then no cursor return is requested 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
returnvalue!!!???
\end_layout

\end_body
\end_document
