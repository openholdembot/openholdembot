//***********************************************************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://www.bonusbots.com/supportforum/YaBB.pl
//
// Required OpenHoldem version: 2.2.0 or later
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   F1x3r
//   Fn101
//   Gecko
//   JConner
//   KaeKruse
//   Kyo
//   Morello
//   MrRuder
//   Nik0
//   NPNG
//   Poker_Dog
//   Satanikut
//   Stangelnator
//   SteveG1963
//   TheHighFish
//   Want2Learn
//   Zolp
//
//*****************************************************************************

//*****************************************************************************
//
// OpenPPL - BettingAction Symbols
//
//*****************************************************************************

##f$OpenPPL_Bets##
(nopponentsbetting > 0) ? 1 : 0

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_BotIsLastRaiser##
(ac_aggressor==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec + didcall + didswag + didrais)

##BotsActionsPreflop##
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_RaisesSinceLastPlay##
// nopponentsraising calls the raising opponents for one circuit
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? nopponentsraising :
// Otherwise: our first action: undefined
-1

//*****************************************************************************
//
// OpenPPL - Betsizes and Stacksizes - supporting technical functions
//
//*****************************************************************************

##f$OpenPPL_Chair0StartingStacksize##
balance0 + currentbet0

##f$OpenPPL_Chair1StartingStacksize##
balance1 + currentbet1

##f$OpenPPL_Chair2StartingStacksize##
balance2 + currentbet2

##f$OpenPPL_Chair3StartingStacksize##
balance3 + currentbet3

##f$OpenPPL_Chair4StartingStacksize##
balance4 + currentbet4

##f$OpenPPL_Chair5StartingStacksize##
balance5 + currentbet5

##f$OpenPPL_Chair6StartingStacksize##
balance6 + currentbet6

##f$OpenPPL_Chair7StartingStacksize##
balance7 + currentbet7

##f$OpenPPL_Chair8StartingStacksize##
balance8 + currentbet8

##f$OpenPPL_Chair9StartingStacksize##
balance9 + currentbet9

##f$OpenPPL_ButtonStartingStacksize##
f$OpenPPL_ButtonChair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_ButtonChair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_ButtonChair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_ButtonChair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_ButtonChair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_ButtonChair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_ButtonChair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_ButtonChair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_ButtonChair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_ButtonChair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_CutOffStartingStacksize##
f$OpenPPL_CutOffChair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_CutOffChair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_CutOffChair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_CutOffChair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_CutOffChair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_CutOffChair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_CutOffChair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_CutOffChair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_CutOffChair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_CutOffChair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_MiddlePosition3StartingStacksize##
f$OpenPPL_MiddlePosition3Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_MiddlePosition3Chair == 9 ? f$OpenPPL_Chair9StartingStacksize :0

##f$OpenPPL_MiddlePosition2StartingStacksize##
f$OpenPPL_MiddlePosition2Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_MiddlePosition2Chair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_MiddlePosition1StartingStacksize##
f$OpenPPL_MiddlePosition1Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_MiddlePosition1Chair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_EarlyPosition3StartingStacksize##
f$OpenPPL_EarlyPosition3Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_EarlyPosition3Chair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_EarlyPosition2StartingStacksize##
f$OpenPPL_EarlyPosition2Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_EarlyPosition2Chair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_EarlyPosition1StartingStacksize##
f$OpenPPL_EarlyPosition1Chair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_EarlyPosition1Chair == 9 ? f$OpenPPL_Chair9StartingStacksize : 0

##f$OpenPPL_BigBlindStartingStacksize##
f$OpenPPL_BigBlindChair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_BigBlindChair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_BigBlindChair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_BigBlindChair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_BigBlindChair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_BigBlindChair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_BigBlindChair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_BigBlindChair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_BigBlindChair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_BigBlindChair == 9 ? f$OpenPPL_Chair9StartingStacksize :0

##f$OpenPPL_SmallBlindStartingStacksize##
f$OpenPPL_SmallBlindChair == 0 ? f$OpenPPL_Chair0StartingStacksize :
f$OpenPPL_SmallBlindChair == 1 ? f$OpenPPL_Chair1StartingStacksize :
f$OpenPPL_SmallBlindChair == 2 ? f$OpenPPL_Chair2StartingStacksize :
f$OpenPPL_SmallBlindChair == 3 ? f$OpenPPL_Chair3StartingStacksize :
f$OpenPPL_SmallBlindChair == 4 ? f$OpenPPL_Chair4StartingStacksize :
f$OpenPPL_SmallBlindChair == 5 ? f$OpenPPL_Chair5StartingStacksize :
f$OpenPPL_SmallBlindChair == 6 ? f$OpenPPL_Chair6StartingStacksize :
f$OpenPPL_SmallBlindChair == 7 ? f$OpenPPL_Chair7StartingStacksize :
f$OpenPPL_SmallBlindChair == 8 ? f$OpenPPL_Chair8StartingStacksize :
f$OpenPPL_SmallBlindChair == 9 ? f$OpenPPL_Chair9StartingStacksize :0

##f$OpenPPL_MaxStillToActStacksizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStacksize

##f$OpenPPL_MaxStillToActStacksizeAfterButton##
f$OpenPPL_SmallBlindStartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterSmallBlind

##f$OpenPPL_MaxStillToActStacksizeAfterCutOff##
f$OpenPPL_ButtonStartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterButton ?
  f$OpenPPL_ButtonStartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterButton

##f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterCutOff?
  f$OpenPPL_CutOffStartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterCutOff

##f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition3

##f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition2

##f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition1

##f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition3

##f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStacksize > f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStacksize : f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition2

##f$OpenPPL_MinStillToActStacksizeAfterSmallBlind##
// Only one player behind SB, so it is easy
f$OpenPPL_BigBlindStartingStacksize

##f$OpenPPL_MinStillToActStacksizeAfterButton##
f$OpenPPL_SmallBlindStartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterSmallBlind ?
  f$OpenPPL_SmallBlindStartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterSmallBlind

##f$OpenPPL_MinStillToActStacksizeAfterCutOff##
f$OpenPPL_ButtonStartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterButton ?
  f$OpenPPL_ButtonStartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterButton

##f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition3##
f$OpenPPL_CutOffStartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterCutOff ?
  f$OpenPPL_CutOffStartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterCutOff

##f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition2##
f$OpenPPL_MiddlePosition3StartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition3 ?
  f$OpenPPL_MiddlePosition3StartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition3

##f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition1##
f$OpenPPL_MiddlePosition2StartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition2 ?
  f$OpenPPL_MiddlePosition2StartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition2

##f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition3##
f$OpenPPL_MiddlePosition1StartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition1 ?
  f$OpenPPL_MiddlePosition1StartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition1

##f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition2##
f$OpenPPL_EarlyPosition3StartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition3 ?
  f$OpenPPL_EarlyPosition3StartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition3

##f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition1##
f$OpenPPL_EarlyPosition2StartingStacksize < f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition2 ?
  f$OpenPPL_EarlyPosition2StartingStacksize : f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition2

##f$OpenPPL_InitMaxOpponentStacksize##
(br == 1 ? me_st_MaxOpponentStacksize_f$OpenPPL_MaxOpponentStacksizeCalculation : 0)

##f$OpenPPL_InitMinOpponentStacksize##
(br == 1 ? me_st_MinOpponentStacksize_f$OpenPPL_MinOpponentStacksizeCalculation : 0)

##f$OpenPPL_MaxOpponentStacksizeCalculation##
balance_rank0 == balance ? balance_rank1 : balance_rank0

##f$OpenPPL_MinOpponentStacksizeCalculation##
nplayersdealt == 10 ?
  (balance_rank9 == balance ? balance_rank8 : balance_rank9) :
nplayersdealt == 9 ?
  (balance_rank8 == balance ? balance_rank7 : balance_rank8) :
nplayersdealt == 8 ?
  (balance_rank7 == balance ? balance_rank6 : balance_rank7) :
nplayersdealt == 7 ?
  (balance_rank6 == balance ? balance_rank5 : balance_rank6) :
nplayersdealt == 6 ?
  (balance_rank5 == balance ? balance_rank4 : balance_rank5) :
nplayersdealt == 5 ?
  (balance_rank4 == balance ? balance_rank3 : balance_rank4) :
nplayersdealt == 4 ?
  (balance_rank3 == balance ? balance_rank2 : balance_rank3) :
nplayersdealt == 3 ?
  (balance_rank2 == balance ? balance_rank1 : balance_rank2) :
nplayersdealt == 2 ?
  (balance_rank1 == balance ? balance_rank0 : balance_rank1) : -1

##f$OpenPPL_CalculateStartingstacksize##
// Precondition: first hand, preflop
bblind > 0 ? (currentbet + balance) / bblind : 0

##f$OpenPPL_InitStartingStacksize##
((handsplayed == 0 || f$OpenPPL_StartingStacksize == 0) && (betround == 1)) ?
  me_st_MemStartingStacksize_f$OpenPPL_CalculateStartingstacksize : 0

##f$OpenPPL_StartingStacksize##
me_re_MemStartingStacksize

//*****************************************************************************
//
// OpenPPL - Betsizes and Stacksizes
//
//*****************************************************************************

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (call / bblind) : 0

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_MaxOpponentStacksize##
me_re_MaxOpponentStacksize

##f$OpenPPL_MaxStillToActStacksize##
chair == f$OpenPPL_BigBlindChair        ? -1 :
chair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MaxStillToActStacksizeAfterSmallBlind :
chair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MaxStillToActStacksizeAfterButton :
chair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MaxStillToActStacksizeAfterCutOff :
chair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition3 :
chair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition2 :
chair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MaxStillToActStacksizeAfterMiddlePosition1 :
chair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition3 :
chair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition2 :
chair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MaxStillToActStacksizeAfterEarlyPosition1 : -1

##f$OpenPPL_MinStillToActStacksize##
chair == f$OpenPPL_BigBlindChair        ? -1:
chair == f$OpenPPL_SmallBlindChair      ? f$OpenPPL_MinStillToActStacksizeAfterSmallBlind      :
chair == f$OpenPPL_ButtonChair          ? f$OpenPPL_MinStillToActStacksizeAfterButton          :
chair == f$OpenPPL_CutOffChair          ? f$OpenPPL_MinStillToActStacksizeAfterCutOff          :
chair == f$OpenPPL_MiddlePosition3Chair ? f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition3 :
chair == f$OpenPPL_MiddlePosition2Chair ? f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition2 :
chair == f$OpenPPL_MiddlePosition1Chair ? f$OpenPPL_MinStillToActStacksizeAfterMiddlePosition1 :
chair == f$OpenPPL_EarlyPosition3Chair  ? f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition3  :
chair == f$OpenPPL_EarlyPosition2Chair  ? f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition2  :
chair == f$OpenPPL_EarlyPosition1Chair  ? f$OpenPPL_MinStillToActStacksizeAfterEarlyPosition1  : -1

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) : 0

##f$OpenPPL_Stacksize##
(bblind > 0) ? (balance / bblind) : 0

##f$OpenPPL_TotalInvested##
(betround == 1 && nbetsround > 0)  ? (ncurrentbets * bblind) :
(betround == 2 && nbetsround1 > 0) ? ((nbetsround1 + ncurrentbets) * bblind) :
(betround == 3 && nbetsround1 > 0) ? ((nbetsround1 + nbetsround2 + ncurrentbets) * bblind) :
(betround == 4 && nbetsround1 > 0) ? ((nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) * bblind) :
0

//*****************************************************************************
//
// OpenPPL - Board Symbols
//
//*****************************************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
($$cr0 == 14) || ($$cr1 == 14) || ($$cr2 == 14)

##f$OpenPPL_AcePresentOnTurn##
f$OpenPPL_AcePresentOnFlop || ($$cr3 == 14)

##f$OpenPPL_BestBoardCard##
rankhicommon

##f$OpenPPL_DoubleGutShotOnBoard##
((rankbitscommon >> 8) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 7) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 6) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 5) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 4) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 3) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 2) &0x7f) == 0x5d ? 1 :
((rankbitscommon >> 1) &0x7f) == 0x5d ? 1 : 0

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
   [f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard <= 4)]

##f$OpenPPL_FlopCardPairedonTurn##
   $$cr0 == $$cr3
|| $$cr1 == $$cr3
|| $$cr2 == $$cr3

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0 == $$cs1 && $$cs0 == $$cs2 && $$cs0 == $$cs3 && $$cs0 == $$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0 == $$cs1 && $$cs0 == $$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0 == $$cs1 && $$cs0 == $$cs2)
|| ($$cs0 == $$cs1 && $$cs0 == $$cs3)
|| ($$cs0 == $$cs2 && $$cs0 == $$cs3)
|| ($$cs1 == $$cs2 && $$cs1 == $$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon&0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
($$cs0 == $$cs1 && $$cs2 == $$cs3 && $$cs0 == $$cs3)

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_MoreThanOneStraightPossibleOnRiver##
(betround <= 4 || f$OpenPPL_NumberOfStraightsPossibleOnRiver < 2) ? 0 : 1

##f$OpenPPL_rankbitscommonriver##
// As this can only be called at the river it is identical to rankbiscommon
rankbitscommon

##f$OpenPPL_NumberOfStraightsPossibleOnTurn##
(`((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_NumberOfStraightsPossibleOnRiver##
(`((f$OpenPPL_rankbitscommonriver >> 10) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  9) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  8) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  7) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  6) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  5) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  4) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  3) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  2) & 0x1f) >= 3 ? 1 : 0) +
(`((f$OpenPPL_rankbitscommonriver >>  1) & 0x1f) >= 3 ? 1 : 0)

##f$OpenPPL_MoreThanOneOneCardStraightPossible##
f$OpenPPL_DoubleGutShotOnBoard || f$OpenPPL_OpenEndedStraightDrawOnBoard

##f$OpenPPL_MoreThanOneStraightPossibleOnTurn##
!f$OpenPPL_PairOnBoard
&& [(f$OpenPPL_BestBoardCard - f$OpenPPL_LowestBoardCard)<= 4 || (f$OpenPPL_2ndBestBoardCard <= 5)]
&& f$OpenPPL_AcePresentOnTurn

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >= 4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_Only1OneCardStraightPossible##
f$OpenPPL_OneCardStraightPossible && !f$OpenPPL_MoreThanOneOneCardStraightPossible

##f$OpenPPL_OpenEndedStraightDrawOnBoard##
(nstraightcommon == 4 && (`((rankbitscommon >> 10) & 0x1f) < 4) && (`((rankbitscommon >> 1) & 0x1f) < 4)) ? 1 : 0

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard != 14)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_LowestFlopCard >= 2)]

##f$OpenPPL_OvercardsOnBoard##
(($$cr0 > rankhiplayer) ? 1 : 0) +
(($$cr1 > rankhiplayer) ? 1 : 0) +
(($$cr2 > rankhiplayer) ? 1 : 0) +
(($$cr3 > rankhiplayer) ? 1 : 0) +
(($$cr4 > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
($$cr0 == $$cr1 || $$cr1 == $$cr2 || $$cr0 == $$cr2)

##f$OpenPPL_LowestFlopCard##
$$cr0 <= $$cr1 && $$cr0 <=  $$cr2 ? $$cr0 :
$$cr1 <= $$cr0 && $$cr1 <=  $$cr2 ? $$cr1 :
$$cr2 <= $$cr0 && $$cr2 <=  $$cr1 ? $$cr2 : -1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
f$OpenPPL_LowestFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_OnlyOneStraightPossible##
f$OpenPPL_StraightPossible
&& ![f$OpenPPL_MoreThanOneStraightPossibleOnFlop
  || f$OpenPPL_MoreThanOneStraightPossibleOnTurn
  || f$OpenPPL_MoreThanOneStraightPossibleOnRiver]

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
($$cr0==12 ||$$cr1==12 ||$$cr2==12)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  $$cr4 > $$cr0
&& $$cr4 > $$cr1
&& $$cr4 > $$cr2
&& $$cr4 > $$cr3 ]

##f$OpenPPL_2ndTopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 <= $$cr2 ? $$cr2 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 <= $$cr2 ? $$cr2 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 >= $$cr1 ? $$cr0 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 <= $$cr1 ? $$cr1 : -1

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? ($$pr0!=14 ? 2**$$pr0 : 0b100000000000010) : 0)
| ($$ps1==tsuit ? ($$pr1!=14 ? 2**$$pr1 : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
`(((srankbitscommon >> 10) & 0x1f) >= 3 && `(((srankbitscommon >> 10) & 0x1f) | ((f$OpenPPL_srankavailable>>10) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  9) & 0x1f) >= 3 && `(((srankbitscommon >>  9) & 0x1f) | ((f$OpenPPL_srankavailable>> 9) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  8) & 0x1f) >= 3 && `(((srankbitscommon >>  8) & 0x1f) | ((f$OpenPPL_srankavailable>> 8) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  7) & 0x1f) >= 3 && `(((srankbitscommon >>  7) & 0x1f) | ((f$OpenPPL_srankavailable>> 7) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  6) & 0x1f) >= 3 && `(((srankbitscommon >>  6) & 0x1f) | ((f$OpenPPL_srankavailable>> 6) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  5) & 0x1f) >= 3 && `(((srankbitscommon >>  5) & 0x1f) | ((f$OpenPPL_srankavailable>> 5) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  4) & 0x1f) >= 3 && `(((srankbitscommon >>  4) & 0x1f) | ((f$OpenPPL_srankavailable>> 4) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  3) & 0x1f) >= 3 && `(((srankbitscommon >>  3) & 0x1f) | ((f$OpenPPL_srankavailable>> 3) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  2) & 0x1f) >= 3 && `(((srankbitscommon >>  2) & 0x1f) | ((f$OpenPPL_srankavailable>> 2) & 0x1f)) == 5) ? 1 :
`(((srankbitscommon >>  1) & 0x1f) >= 3 && `(((srankbitscommon >>  1) & 0x1f) | ((f$OpenPPL_srankavailable>> 1) & 0x1f)) == 5) ? 1 : 0

##f$OpenPPL_SuitsOnBoard##
f$OpenPPL_SuitsOnFlop +
((($$cs3 != $$cs0) && ($$cs3 != $$cs1) && ($$cs3 != $$cs2)) ? 1 : 0) +
((($$cs4 != $$cs0) && ($$cs4 != $$cs1) && ($$cs4 != $$cs2) && ($$cs4 != $$cs3)) ? 1 : 0)

##f$OpenPPL_SuitsOnFlop##
 ($$cs0 == $$cs1 && $$cs1 == $$cs2) ? 1 :
(($$cs0 == $$cs1 && $$cs1 != $$cs2) || ($$cs0 == $$cs2 && $$cs0 != $$cs1) || ($$cs0 != $$cs1 && $$cs1 == $$cs2)) ? 2 :
($$cs0 != $$cs1 && $$cs1 != $$cs2 && $$cs0 != $$cs2) ? 3 : 0

##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon >> 10) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 9) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 8) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 7) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 6) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 5) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 4) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 3) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 2) & 0x1f) >= 3 ? 1 :
`((srankbitscommon >> 1) & 0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))

##f$OpenPPL_RankBitsCommonTurn##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))
| ($$cr3 != 14 ? 2**$$cr3 : (0x4002))

##f$OpenPPL_StraightPossibleOnFlop##
`(((f$OpenPPL_RankBitsCommOnFlop >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommOnFlop >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
`(((f$OpenPPL_RankBitsCommonTurn >> 10) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  9) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  8) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  7) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  6) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  5) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  4) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  3) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  2) & 0x1f) >= 3) ? 1 :
`(((f$OpenPPL_RankBitsCommonTurn >>  1) & 0x1f) >= 3) ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 ? $$cr2 : -1

##f$OpenPPL_TopFlopCardPairedonRiver##
f$OpenPPL_TopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_TopFlopCardPairedonTurn##
f$OpenPPL_TopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
($$cr0 == $$cr1 && $$cr1 == $$cr2) ? 1 :
($$cr0 == $$cr1 && $$cr1 == $$cr3) ? 1 :
($$cr0 == $$cr2 && $$cr2 == $$cr3) ? 1 :
($$cr1 == $$cr2 && $$cr2 == $$cr3) ? 1 : 0

##f$OpenPPL_TurnCardisOvercardToBoard##
[  $$cr3 > $$cr0
&& $$cr3 > $$cr1
&& $$cr3 > $$cr2 ]

##f$OpenPPL_TurnCardPaired##
($$cr3 == $$cr4)

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & istwopair) || (pokervalcommon & isfullhouse)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
`((rankbitscommon & 0b111110) >= 3) ? 1 : 0

//*****************************************************************************
//
// OpenPPL - Card Constants
//
//*****************************************************************************

##f$OpenPPL_ConstCardAce##
14

##f$OpenPPL_ConstCardKing##
13

##f$OpenPPL_ConstCardQueen##
12

##f$OpenPPL_ConstCardJack##
11

##f$OpenPPL_ConstCardTen##
10

##f$OpenPPL_ConstCardNine##
9

##f$OpenPPL_ConstCardEight##
8

##f$OpenPPL_ConstCardSeven##
7

##f$OpenPPL_ConstCardSix##
6

##f$OpenPPL_ConstCardFive##
5

##f$OpenPPL_ConstCardFour##
4

##f$OpenPPL_ConstCardThree##
3

##f$OpenPPL_ConstCardTwo##
2

//*****************************************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//*****************************************************************************

##f$OpenPPL_HadOverpairOnFlop##
[  ispair
&& $$pr0 > $$cr0
&& $$pr0 > $$cr1
&& $$pr0 > $$cr2 ]

##f$OpenPPL_HadPairOnFlop##
(ispair || $$pr0 == $$cr0 || $$pr0 == $$cr1 || $$pr0 == $$cr2  || $$pr1 == $$cr0 || $$pr1 == $$cr1  || $$pr1 == $$cr2)

##f$OpenPPL_HadPairOnTurn##
f$OpenPPL_HadPairOnFlop || f$OpenPPL_FlopCardPairedonTurn || $$pr0 == $$cr3 || $$pr1 == $$cr3

##f$OpenPPL_HadTwoPairOnFlop##
   ($$pr0 == $$cr0 || $$pr0 == $$cr1 || $$pr0 == $$cr2)
&& ($$pr1 == $$cr1 || $$pr1 == $$cr1 || $$pr1 == $$cr2)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverpair##
($KK && $$cr0 < 13 && $$cr1 < 13 && $$cr2 < 13 && $$cr3 < 13 && $$cr4 < 13 )

##f$OpenPPL_Have2ndBestOverpairOrBetter##
(f$OpenPPL_Have2ndBestOverpair || f$OpenPPL_HaveBestOverpairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##OpenPPL_Have2ndTopPair##
$$pr0 == f$OpenPPL_2ndBestBoardCard || $$pr1 == f$OpenPPL_2ndBestBoardCard

##OpenPPL_Have2ndTopSet##
ispair && $$pr0 == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbits & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverpair##
$QQ && $$cr0 < 12 && $$cr1 < 12 && $$cr2 < 12 && $$cr3 < 12 && $$cr4 < 12

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverpairOrBetter##
(f$OpenPPL_Have3rdBestOverpair ||  f$OpenPPL_Have2ndBestOverpairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##OpenPPL_Have3rdOverpair##
ispair && ($$pr0 < f$OpenPPL_2ndBestBoardCard) && ($$pr0 > f$OpenPPL_3rdBestBoardCard)

##OpenPPL_Have3rdTopPair##
$$pr0 == f$OpenPPL_3rdBestBoardCard || $$pr1 == f$OpenPPL_3rdBestBoardCard

##OpenPPL_Have3rdTopSet##
ispair && $$pr0 == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##OpenPPL_Have4thOverpair##
ispair && ($$pr0 < f$OpenPPL_3rdBestBoardCard) && ($$pr0 > f$OpenPPL_4thBestBoardCard)

##OpenPPL_Have4thTopPair##
$$pr0 == f$OpenPPL_4thBestBoardCard || $$pr1 == f$OpenPPL_4thBestBoardCard

##OpenPPL_Have4thTopSet##
ispair && $$pr0 == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 0 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 0 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 0 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 0 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 0 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 0 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 0 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 0 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 0 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 0 ? f$OpenPPL_ConstCardFive :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 0 ? f$OpenPPL_ConstCardFour :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 0 ? f$OpenPPL_ConstCardThree :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 0 ? f$OpenPPL_ConstCardTwo :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##OpenPPL_Have5thOverpair##
ispair && ($$pr0 < f$OpenPPL_4thBestBoardCard) && ($$pr0 > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveBackdoor2ndNutFlushDraw##
f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have2ndNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackdoor3rdNutFlushDraw##
f$OpenPPL_Have3rdNutFlush || f$OpenPPL_Have3rdNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorFlushDraw##
(br <= 3) && nsuited >= 3)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverpairOrBetter)

##f$OpenPPL_HaveBestOverpair##
($AA && $$cr0 < 14 && $$cr1 < 14 && $$cr2 < 14 && $$cr3 < 14 && $$cr4 < 14 )

##f$OpenPPL_HaveBestOverpairOrBetter##
  (f$OpenPPL_HaveBestOverpair
|| f$OpenPPL_HaveTwoPair
|| f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips
|| f$OpenPPL_HaveStraight
|| f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse
|| f$OpenPPL_HaveQuads
|| f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_lowestBitOfRankBitsCommon##
(1>>ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_lowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ?  2 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? 14 :
-1

##OpenPPL_HaveBottomTwoPair##
($$pr0 == f$OpenPPL_LowestBoardCard && $$pr1 == f$OpenPPL_2ndLowestBoardCard)
|| ($$pr0 == f$OpenPPL_2ndLowestBoardCard && $$pr1 == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveDoubleGutshotDraw##
   `((rankbits >> 1) & 0b1011101) == 5  // A_345_7
|| `((rankbits >> 2) & 0b1011101) == 5  // 2_456_8
|| `((rankbits >> 3) & 0b1011101) == 5  // 3_567_9
|| `((rankbits >> 4) & 0b1011101) == 5  // 4_678_T
|| `((rankbits >> 5) & 0b1011101) == 5  // 5_789_J
|| `((rankbits >> 6) & 0b1011101) == 5  // 6_89T_Q
|| `((rankbits >> 7) & 0b1011101) == 5  // 8_9TJ_K
|| `((rankbits >> 8) & 0b1011101) == 5  // 9_TJQ_A
|| `((rankbits >> 1) & 0b11011011) == 6 // A2_45_78
|| `((rankbits >> 2) & 0b11011011) == 6 // 23_56_89
|| `((rankbits >> 3) & 0b11011011) == 6 // 34_67_9T
|| `((rankbits >> 4) & 0b11011011) == 6 // 45_78_TJ
|| `((rankbits >> 5) & 0b11011011) == 6 // 56_89_JQ
|| `((rankbits >> 6) & 0b11011011) == 6 // 67_9T_QK
|| `((rankbits >> 7) & 0b11011011) == 6 // 78_TJ_KA

##f$OpenPPL_HaveFlush##
(nsuited >= 5)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveFullHouse##
isfullhouse || f$OpenPPL_HaveQuads

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !(f$OpenPPL_Overcards == 2) && !f$OpenPPL_HaveBestOverpairOrBetter
&& !f$OpenPPL_HaveBackdoorFlushDraw && !f$OpenPPL_HaveBackdoorStraightDraw

##f$OpenPPL_HaveNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_RankBitsCommonWithAdditionalAce##
rankbitscommon | 0b100000000000010

##f$OpenPPL_RankBitsCommonWithAdditionalKing##
rankbitscommon | 0b010000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalQueen##
rankbitscommon | 0b001000000000000

##f$OpenPPL_RankBitsCommonWithAdditionalJack##
rankbitscommon | 0b000100000000000

##f$OpenPPL_RankBitsCommonWithAdditionalTen##
rankbitscommon | 0b000010000000000

##f$OpenPPL_RankBitsCommonWithAdditionalNine##
rankbitscommon | 0b000001000000000

##f$OpenPPL_RankBitsCommonWithAdditionalEight##
rankbitscommon | 0b000000100000000

##f$OpenPPL_RankBitsCommonWithAdditionalSeven##
rankbitscommon | 0b000000010000000

##f$OpenPPL_RankBitsCommonWithAdditionalSix##
rankbitscommon | 0b000000001000000

##f$OpenPPL_RankBitsCommonWithAdditionalFive##
rankbitscommon | 0b000000000100000

##f$OpenPPL_RankBitsCommonWithAdditionalFour##
rankbitscommon | 0b000000000010000

##f$OpenPPL_RankBitsCommonWithAdditionalThree##
rankbitscommon | 0b000000000001000

##f$OpenPPL_RankBitsCommonWithAdditionalTwo##
rankbitscommon | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
(f$OpenPPL_RankBitsCommonWithAdditionalAce & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithAdditionalKing & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithAdditionalQueen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithAdditionalJack & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b111110000000000) >= 3 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithAdditionalTen & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b011111000000000) >= 3 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithAdditionalNine & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b001111100000000) >= 3 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithAdditionalEight & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000111110000000) >= 3 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithAdditionalSeven & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000011111000000) >= 3 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithAdditionalSix & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000001111100000) >= 3 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithAdditionalFive & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000111110000) >= 3 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithAdditionalFour & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000011111000) >= 3 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithAdditionalThree & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard##
(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000001111100) >= 3 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsCommonWithAdditionalTwo & 0b000000000111110) >= 3 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_RankBitsWithAdditionalAce##
rankbits | 0b100000000000010

##f$OpenPPL_RankBitsWithAdditionalKing##
rankbits | 0b010000000000000

##f$OpenPPL_RankBitsWithAdditionalQueen##
rankbits | 0b001000000000000

##f$OpenPPL_RankBitsWithAdditionalJack##
rankbits | 0b000100000000000

##f$OpenPPL_RankBitsWithAdditionalTen##
rankbits | 0b000010000000000

##f$OpenPPL_RankBitsWithAdditionalNine##
rankbits | 0b000001000000000

##f$OpenPPL_RankBitsWithAdditionalEight##
rankbits | 0b000000100000000

##f$OpenPPL_RankBitsWithAdditionalSeven##
rankbits | 0b000000010000000

##f$OpenPPL_RankBitsWithAdditionalSix##
rankbits | 0b000000001000000

##f$OpenPPL_RankBitsWithAdditionalFive##
rankbits | 0b000000000100000

##f$OpenPPL_RankBitsWithAdditionalFour##
rankbits | 0b000000000010000

##f$OpenPPL_RankBitsWithAdditionalThree##
rankbits | 0b000000000001000

##f$OpenPPL_RankBitsWithAdditionalTwo##
rankbits | 0b000000000000100

##f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalAce & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
// We can ignore all straights without an ace here
(f$OpenPPL_RankBitsWithAdditionalAce & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalKing & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsWithAdditionalKing & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
-1

##f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalQueen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsWithAdditionalQueen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsWithAdditionalQueen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
-1

##f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalJack & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsWithAdditionalJack & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsWithAdditionalJack & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsWithAdditionalJack & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
-1

##f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalTen & 0b111110000000000) >= 5 ? f$OpenPPL_ConstCardAce :
(f$OpenPPL_RankBitsWithAdditionalTen & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsWithAdditionalTen & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsWithAdditionalTen & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsWithAdditionalTen & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
-1

##f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalNine & 0b011111000000000) >= 5 ? f$OpenPPL_ConstCardKing :
(f$OpenPPL_RankBitsWithAdditionalNine & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsWithAdditionalNine & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsWithAdditionalNine & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsWithAdditionalNine & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
-1

##f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalEight & 0b001111100000000) >= 5 ? f$OpenPPL_ConstCardQueen :
(f$OpenPPL_RankBitsWithAdditionalEight & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsWithAdditionalEight & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsWithAdditionalEight & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsWithAdditionalEight & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
-1

##f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000111110000000) >= 5 ? f$OpenPPL_ConstCardJack :
(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsWithAdditionalSeven & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
-1

##f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalSix & 0b000011111000000) >= 5 ? f$OpenPPL_ConstCardTen :
(f$OpenPPL_RankBitsWithAdditionalSix & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsWithAdditionalSix & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
-1

##f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalFive & 0b000001111100000) >= 5 ? f$OpenPPL_ConstCardNine :
(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsWithAdditionalFive & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000111110000) >= 5 ? f$OpenPPL_ConstCardEight :
(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsWithAdditionalFour & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000011111000) >= 5 ? f$OpenPPL_ConstCardSeven :
(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsWithAdditionalThree & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard##
(f$OpenPPL_RankBitsWithAdditionalTqo & 0b000000001111100) >= 5 ? f$OpenPPL_ConstCardSix :
(f$OpenPPL_RankBitsWithAdditionalTqo & 0b000000000111110) >= 5 ? f$OpenPPL_ConstCardFive :
-1

##f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfAceHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfAceHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfKingHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfKingHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfQueenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfQueenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfJackHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfJackHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfNineHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfNineHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfEightHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfEightHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSevenHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSevenHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfSixHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfSixHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFiveHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFiveHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfFourHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfFourHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfThreeHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfThreeHitsTheBoard)

##f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard##
   (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard != -1)
&& (f$OpenPPL_BestPossibleStraightForUsIfTwoHitsTheBoard >= f$OpenPPL_BestPossibleStraightForVillainIfTwoHitsTheBoard)

##f$OpenPPL_NumberOfCardranksThatGiveMeTheBestPossibleStraight##
  f$OpenPPL_GetBestPossibleStraightIfAceHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfKingHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfQueenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfJackHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfNineHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfEightHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSevenHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfSixHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFiveHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfFourHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfThreeHitsTheBoard
+ f$OpenPPL_GetBestPossibleStraightIfTwoHitsTheBoard

##f$OpenPPL_HaveNutStraightDraw##
(nsuitedcommon < 2) && (f$OpenPPL_NumberOfCardranksThatGiveMeTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveInsideNutStraightDraw##
   (nsuitedcommon < 2)  && (f$OpenPPL_NumberOfCardranksThatGiveMeTheBestPossibleStraight >= 1)
|| (nsuitedcommon == 2) && (f$OpenPPL_NumberOfCardranksThatGiveMeTheBestPossibleStraight >= 2)
|| (nsuitedcommon == 3) && (f$OpenPPL_NumberOfCardranksThatGiveMeTheBestPossibleStraight >= 2)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveOpenEndedStraightDraw##
f$OpenPPL_HaveStraight
|| ((rankbits >> 0) & 0b111100) == 0b111100 // 5432
|| ((rankbits >> 1) & 0b111100) == 0b111100 // 6543
|| ((rankbits >> 2) & 0b111100) == 0b111100 // 7654
|| ((rankbits >> 3) & 0b111100) == 0b111100 // 8765
|| ((rankbits >> 4) & 0b111100) == 0b111100 // 9876
|| ((rankbits >> 5) & 0b111100) == 0b111100 // T987
|| ((rankbits >> 6) & 0b111100) == 0b111100 // JT98
|| ((rankbits >> 7) & 0b111100) == 0b111100 // QJT9
|| ((rankbits >> 8) & 0b111100) == 0b111100 // KQJT

##f$OpenPPL_HaveQuads##
[ isfourofakind && (nrankedcommon < 4) ]

##f$OpenPPL_HaveOverpair##
ispair && (rankhiplayer > rankhicommon)

##f$OpenPPL_HaveOverpairOrBetter##
f$OpenPPL_HaveOverpair || f$OpenPPL_HaveBestOverpairOrBetter

##f$OpenPPL_HavePair##
[  $$pr0==$$pr1
|| $$pr0==$$cr0 || $$pr0==$$cr1 || $$pr0==$$cr2 || $$pr0==$$cr3 || $$pr0==$$cr4
|| $$pr1==$$cr0 || $$pr1==$$cr1 || $$pr1==$$cr2 || $$pr1==$$cr3 || $$pr1==$$cr4 ]

##f$OpenPPL_HaveSet##
[  ispair
&& (($$pr0 == $$cr0) || ($$pr0 == $$cr1) || ($$pr0 == $$cr2) || ($$pr0 == $$cr3) || ($$pr0 == $$cr4)) ]

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits &0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_HaveStraight##
nstraightfill == 0

##f$OpenPPL_HaveStraightDraw##
f$OpenPPL_HaveOpenEndedStraightDraw || f$OpenPPL_HaveDoubleGutshotDraw

##f$OpenPPL_HaveStraightFlush##
(isstraightflush || isroyalflush)

##f$OpenPPL_HaveTwoPair##
`(rankbitsplayer & rankbitscommon) == 2

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Unknown suited cards are cards, which are not on board and not in heroes hand.
`((~srankbits & 0x7fff) >> srankhi)

##f$OpenPPL_Overcards##
$$pr0>rankhicommon && $$pr1>rankhicommon ? 2 :
$$pr0>rankhicommon || $$pr1>rankhicommon ? 1 :
$$pr0<=rankhicommon && $$pr1<=rankhicommon ? 0 : 0

//*****************************************************************************
//
// OpenPPL - Other Symbols
//
//*****************************************************************************

##f$OpenPPL_IsFinalAnswer##
isfinalanswer

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_Random##
[ random * 100 ]

//*****************************************************************************
//
// OpenPPL - Players and Opponents
//
//*****************************************************************************

##f$OpenPPL_Opponents##
nopponentsplaying

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_OpponentIsAllin##
`f$OpenPPL_Opponents_AllinBits > 0

##f$OpenPPL_Opponents_AllinBits##
(betround == 1) ?
[0
|(((opponentsplayingbits & (1 << 0)) && (currentbet0 > 0) && (balance0 == 0)) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && (currentbet1 > 0) && (balance1 == 0)) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && (currentbet2 > 0) && (balance2 == 0)) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && (currentbet3 > 0) && (balance3 == 0)) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && (currentbet4 > 0) && (balance4 == 0)) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && (currentbet5 > 0) && (balance5 == 0)) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && (currentbet6 > 0) && (balance6 == 0)) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && (currentbet7 > 0) && (balance7 == 0)) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && (currentbet8 > 0) && (balance8 == 0)) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && (currentbet9 > 0) && (balance9 == 0)) ? 1 << 9 : 0)
]
:
[0
|(((opponentsplayingbits & (1 << 0)) && balance0 == 0) ? 1 << 0 : 0)
|(((opponentsplayingbits & (1 << 1)) && balance1 == 0) ? 1 << 1 : 0)
|(((opponentsplayingbits & (1 << 2)) && balance2 == 0) ? 1 << 2 : 0)
|(((opponentsplayingbits & (1 << 3)) && balance3 == 0) ? 1 << 3 : 0)
|(((opponentsplayingbits & (1 << 4)) && balance4 == 0) ? 1 << 4 : 0)
|(((opponentsplayingbits & (1 << 5)) && balance5 == 0) ? 1 << 5 : 0)
|(((opponentsplayingbits & (1 << 6)) && balance6 == 0) ? 1 << 6 : 0)
|(((opponentsplayingbits & (1 << 7)) && balance7 == 0) ? 1 << 7 : 0)
|(((opponentsplayingbits & (1 << 8)) && balance8 == 0) ? 1 << 8 : 0)
|(((opponentsplayingbits & (1 << 9)) && balance9 == 0) ? 1 << 9 : 0)
]

##f$OpenPPL_OpponentsLeft##
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
((balance0 < balance) && (playersseatedbits & 0x0001) ? 1:0) +
((balance1 < balance) && (playersseatedbits & 0x0002) ? 1:0) +
((balance2 < balance) && (playersseatedbits & 0x0004) ? 1:0) +
((balance3 < balance) && (playersseatedbits & 0x0008) ? 1:0) +
((balance4 < balance) && (playersseatedbits & 0x0010) ? 1:0) +
((balance5 < balance) && (playersseatedbits & 0x0020) ? 1:0) +
((balance6 < balance) && (playersseatedbits & 0x0040) ? 1:0) +
((balance7 < balance) && (playersseatedbits & 0x0080) ? 1:0) +
((balance8 < balance) && (playersseatedbits & 0x0100) ? 1:0) +
((balance9 < balance) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToAct##
(dealposition > 2) ? (nchairsdealtleft + 2) :
(dealposition == 1) ? 1 :
0

//*****************************************************************************
//
// OpenPPL - Position Symbols
//
//*****************************************************************************

##f$OpenPPL_BigBlindChair##
ac_dealpos0 == 2 ? 0 :
ac_dealpos1 == 2 ? 1 :
ac_dealpos2 == 2 ? 2 :
ac_dealpos3 == 2 ? 3 :
ac_dealpos4 == 2 ? 4 :
ac_dealpos5 == 2 ? 5 :
ac_dealpos6 == 2 ? 6 :
ac_dealpos7 == 2 ? 7 :
ac_dealpos8 == 2 ? 8 :
ac_dealpos9 == 2 ? 9 :
-1

##f$OpenPPL_SmallBlindChair##
ac_dealpos0 == 1 ? 0 :
ac_dealpos1 == 1 ? 1 :
ac_dealpos2 == 1 ? 2 :
ac_dealpos3 == 1 ? 3 :
ac_dealpos4 == 1 ? 4 :
ac_dealpos5 == 1 ? 5 :
ac_dealpos6 == 1 ? 6 :
ac_dealpos7 == 1 ? 7 :
ac_dealpos8 == 1 ? 8 :
ac_dealpos9 == 1 ? 9 :
-1

##f$OpenPPL_ButtonChair##
ac_dealpos0 == nplayersdealt ? 0 :
ac_dealpos1 == nplayersdealt ? 1 :
ac_dealpos2 == nplayersdealt ? 2 :
ac_dealpos3 == nplayersdealt ? 3 :
ac_dealpos4 == nplayersdealt ? 4 :
ac_dealpos5 == nplayersdealt ? 5 :
ac_dealpos6 == nplayersdealt ? 6 :
ac_dealpos7 == nplayersdealt ? 7 :
ac_dealpos8 == nplayersdealt ? 8 :
ac_dealpos9 == nplayersdealt ? 9 :
-1

##f$OpenPPL_CutOffChair##
ac_dealpos0 == (nplayersdealt - 1) ? 0 :
ac_dealpos1 == (nplayersdealt - 1) ? 1 :
ac_dealpos2 == (nplayersdealt - 1) ? 2 :
ac_dealpos3 == (nplayersdealt - 1) ? 3 :
ac_dealpos4 == (nplayersdealt - 1) ? 4 :
ac_dealpos5 == (nplayersdealt - 1) ? 5 :
ac_dealpos6 == (nplayersdealt - 1) ? 6 :
ac_dealpos7 == (nplayersdealt - 1) ? 7 :
ac_dealpos8 == (nplayersdealt - 1) ? 8 :
ac_dealpos9 == (nplayersdealt - 1) ? 9 :
-1

##f$OpenPPL_MiddlePosition3Chair##
ac_dealpos0 == (nplayersdealt - 2) ? 0 :
ac_dealpos1 == (nplayersdealt - 2) ? 1 :
ac_dealpos2 == (nplayersdealt - 2) ? 2 :
ac_dealpos3 == (nplayersdealt - 2) ? 3 :
ac_dealpos4 == (nplayersdealt - 2) ? 4 :
ac_dealpos5 == (nplayersdealt - 2) ? 5 :
ac_dealpos6 == (nplayersdealt - 2) ? 6 :
ac_dealpos7 == (nplayersdealt - 2) ? 7 :
ac_dealpos8 == (nplayersdealt - 2) ? 8 :
ac_dealpos9 == (nplayersdealt - 2) ? 9 :
-1

##f$OpenPPL_MiddlePosition2Chair##
ac_dealpos0 == (nplayersdealt - 3) ? 0 :
ac_dealpos1 == (nplayersdealt - 3) ? 1 :
ac_dealpos2 == (nplayersdealt - 3) ? 2 :
ac_dealpos3 == (nplayersdealt - 3) ? 3 :
ac_dealpos4 == (nplayersdealt - 3) ? 4 :
ac_dealpos5 == (nplayersdealt - 3) ? 5 :
ac_dealpos6 == (nplayersdealt - 3) ? 6 :
ac_dealpos7 == (nplayersdealt - 3) ? 7 :
ac_dealpos8 == (nplayersdealt - 3) ? 8 :
ac_dealpos9 == (nplayersdealt - 3) ? 9 :
-1

##f$OpenPPL_MiddlePosition1Chair##
ac_dealpos0 == (nplayersdealt - 4) ? 0 :
ac_dealpos1 == (nplayersdealt - 4) ? 1 :
ac_dealpos2 == (nplayersdealt - 4) ? 2 :
ac_dealpos3 == (nplayersdealt - 4) ? 3 :
ac_dealpos4 == (nplayersdealt - 4) ? 4 :
ac_dealpos5 == (nplayersdealt - 4) ? 5 :
ac_dealpos6 == (nplayersdealt - 4) ? 6 :
ac_dealpos7 == (nplayersdealt - 4) ? 7 :
ac_dealpos8 == (nplayersdealt - 4) ? 8 :
ac_dealpos9 == (nplayersdealt - 4) ? 9 :
-1

##f$OpenPPL_EarlyPosition3Chair##
ac_dealpos0 == (nplayersdealt - 5) ? 0 :
ac_dealpos1 == (nplayersdealt - 5) ? 1 :
ac_dealpos2 == (nplayersdealt - 5) ? 2 :
ac_dealpos3 == (nplayersdealt - 5) ? 3 :
ac_dealpos4 == (nplayersdealt - 5) ? 4 :
ac_dealpos5 == (nplayersdealt - 5) ? 5 :
ac_dealpos6 == (nplayersdealt - 5) ? 6 :
ac_dealpos7 == (nplayersdealt - 5) ? 7 :
ac_dealpos8 == (nplayersdealt - 5) ? 8 :
ac_dealpos9 == (nplayersdealt - 5) ? 9 :
-1

##f$OpenPPL_EarlyPosition2Chair##
ac_dealpos0 == (nplayersdealt - 6) ? 0 :
ac_dealpos1 == (nplayersdealt - 6) ? 1 :
ac_dealpos2 == (nplayersdealt - 6) ? 2 :
ac_dealpos3 == (nplayersdealt - 6) ? 3 :
ac_dealpos4 == (nplayersdealt - 6) ? 4 :
ac_dealpos5 == (nplayersdealt - 6) ? 5 :
ac_dealpos6 == (nplayersdealt - 6) ? 6 :
ac_dealpos7 == (nplayersdealt - 6) ? 7 :
ac_dealpos8 == (nplayersdealt - 6) ? 8 :
ac_dealpos9 == (nplayersdealt - 6) ? 9 :
-1

##f$OpenPPL_EarlyPosition1Chair##
ac_dealpos0 == (nplayersdealt - 7) ? 0 :
ac_dealpos1 == (nplayersdealt - 7) ? 1 :
ac_dealpos2 == (nplayersdealt - 7) ? 2 :
ac_dealpos3 == (nplayersdealt - 7) ? 3 :
ac_dealpos4 == (nplayersdealt - 7) ? 4 :
ac_dealpos5 == (nplayersdealt - 7) ? 5 :
ac_dealpos6 == (nplayersdealt - 7) ? 6 :
ac_dealpos7 == (nplayersdealt - 7) ? 7 :
ac_dealpos8 == (nplayersdealt - 7) ? 8 :
ac_dealpos9 == (nplayersdealt - 7) ? 9 :
-1

##f$OpenPPL_DealPositionLastRaiser##
(ac_aggressor == 0) ? ac_dealpos0 :
(ac_aggressor == 1) ? ac_dealpos1 :
(ac_aggressor == 2) ? ac_dealpos2 :
(ac_aggressor == 3) ? ac_dealpos3 :
(ac_aggressor == 4) ? ac_dealpos4 :
(ac_aggressor == 5) ? ac_dealpos5 :
(ac_aggressor == 6) ? ac_dealpos6 :
(ac_aggressor == 7) ? ac_dealpos7 :
(ac_aggressor == 8) ? ac_dealpos8 :
(ac_aggressor == 9) ? ac_dealpos9 :
-1

##f$OpenPPL_EarlyPosition1Calling##
(callbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1

##f$OpenPPL_EarlyPosition2Calling##
(callbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1

##f$OpenPPL_EarlyPosition3Calling##
(callbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1

##f$OpenPPL_MiddlePosition1Calling##
(callbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1

##f$OpenPPL_MiddlePosition2Calling##
(callbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1

##f$OpenPPL_MiddlePosition3Calling##
(callbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1

##f$OpenPPL_CutOffCalling##
(callbits1 >> f$OpenPPL_CutOffChair) & 1 == 1

##f$OpenPPL_ButtonCalling##
(callbits1 >> f$OpenPPL_ButtonChair) & 1 == 1

##f$OpenPPL_SmallBlindCalling##
(callbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1

##f$OpenPPL_BigBlindCalling##
(callbits1 >> f$OpenPPL_BigBlindChair) & 11 == 1

##f$OpenPPL_EarlyPosition1Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition1Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition2Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition2Chair) & 1 == 1]

##f$OpenPPL_EarlyPosition3Raising##
[(raisbits1 >> f$OpenPPL_EarlyPosition3Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition1Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition1Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition2Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition2Chair) & 1 == 1]

##f$OpenPPL_MiddlePosition3Raising##
[(raisbits1 >> f$OpenPPL_MiddlePosition3Chair) & 1 == 1]

##f$OpenPPL_CutOffRaising##
[(raisbits1 >> f$OpenPPL_CutOffChair) & 1 == 1]

##f$OpenPPL_ButtonRaising##
[(raisbits1 >> f$OpenPPL_ButtonChair) & 1 == 1]

##f$OpenPPL_SmallBlindRaising##
[(raisbits1 >> f$OpenPPL_SmallBlindChair) & 1 == 1]

##f$OpenPPL_BigBlindRaising##
[(raisbits1 >> f$OpenPPL_BigBlindChair) & 1 == 1]

##f$OpenPPL_FirstCallerPosition##
f$OpenPPL_EarlyPosition1Calling ? 9 :
f$OpenPPL_EarlyPosition2Calling ? 8 :
f$OpenPPL_EarlyPosition3Calling ? 7 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_CutOffCalling ? 3 :
f$OpenPPL_ButtonCalling ? 2 :
f$OpenPPL_SmallBlindCalling ? 1 :
// Can't be button (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_FirstRaiserPosition##
f$OpenPPL_EarlyPosition1Raising  ? 9 :
f$OpenPPL_EarlyPosition2Raising  ? 8 :
f$OpenPPL_EarlyPosition3Raising  ? 7 :
f$OpenPPL_MiddlePosition1Raising ? 6 :
f$OpenPPL_MiddlePosition2Raising ? 5 :
f$OpenPPL_MiddlePosition3Raising ? 4 :
f$OpenPPL_CutOffRaising          ? 3 :
f$OpenPPL_ButtonRaising          ? 2 :
f$OpenPPL_SmallBlindRaising      ? 1 :
// Can't be button (0), as it is for the first orbit preflop only
-1

##f$OpenPPL_LastCallerPosition##
// Can't be button (0), as it is for the first orbit preflop only
f$OpenPPL_SmallBlindCalling      ? 1 :
f$OpenPPL_ButtonCalling          ? 2 :
f$OpenPPL_CutOffCalling          ? 3 :
f$OpenPPL_MiddlePosition3Calling ? 4 :
f$OpenPPL_MiddlePosition2Calling ? 5 :
f$OpenPPL_MiddlePosition1Calling ? 6 :
f$OpenPPL_EarlyPosition3Calling  ? 7 :
f$OpenPPL_EarlyPosition2Calling  ? 8 :
f$OpenPPL_EarlyPosition1Calling  ? 9 :
-1

##f$OpenPPL_LastRaiserPosition##
// Big blind = 0
(f$OpenPPL_DealPositionLastRaiser == 2) ? 0 :
// Small blind = 1
(f$OpenPPL_DealPositionLastRaiser == 1) ? 1 :
// Normal players:
// BU = 2, CO = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle

//*****************************************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//*****************************************************************************

##f$OpenPPL_InitMemorySymbols##
  f$OpenPPL_InitMaxOpponentStacksize
+ f$OpenPPL_InitMinOpponentStacksize


//*****************************************************************************
//
// Not yet implemented - but already used
//
//*****************************************************************************


##f$OpenPPL_HaveBackdoorStraightDraw##
0


//*****************************************************************************
//
// OpenPPL - the glory end
//
//*****************************************************************************
