//***********************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbots:      http://www.bonusbots.com/supportforum/YaBB.pl
//
// Required OpenHoldem version: 2.2.0 or better
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   F1x3r
//   Fn101
//   JConner
//   KaeKruse
//   Kyo
//   Nik0
//   NPNG
//   Poker_Dog
//   Satanikut
//   Stangelnator
//   SteveG1963
//   TheHighFish
//   Want2Learn
//   Zolp
//
//***********************************************************

//***********************************************************
//
// OpenPPL - BettingAction Symbols
//
//***********************************************************

##f$OpenPPL_Bets##
(nopponentsbetting > 0) ? 1 : 0

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_BotIsLastRaiser##
(ac_aggressor==userchair)

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
(didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
(didcall + didrais + didswag)

##f$OpenPPL_BotsActionsOnThisRoundIncludingChecks##
// Folds and allins are not relevant, as then the hand is over for us.
(didchec || didcall || didswag || didrais)

##BotsActionsPreflop##
(didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)

##f$OpenPPL_RaisesSinceLastPlay##
// nopponentsraising calls the raising opponents for one circuit
(f$OpenPPL_BotsActionsOnThisRoundIncludingChecks > 0) ? nopponentsraising :
// Otherwise: our first action: undefined
-1

//***********************************************************
//
// OpenPPL - Betsizes and Stacksizes
//
//***********************************************************

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (call / bblind) : 0

##f$OpenPPL_BetSize##
ncallbets

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) : 0

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : 0

##f$OpenPPL_TotalInvested##
(betround==1 && nbetsround>0)  ? (ncurrentbets * bblind) :
(betround==2 && nbetsround1>0) ? ((nbetsround1 + ncurrentbets) * bblind) :
(betround==3 && nbetsround1>0) ? ((nbetsround1 + nbetsround2 + ncurrentbets) * bblind) :
(betround==4 && nbetsround1>0) ? ((nbetsround1 + nbetsround2 + nbetsround3 + ncurrentbets) * bblind) :
0

//***********************************************************
//
// OpenPPL - Board Symbols
//
//***********************************************************

##f$OpenPPL_2ndBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b100000000000000) != 1 ? 14 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutTopBit & 0b000000000000100) != 1 ?  2 :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_AcePresentOnFlop##
($$cr0 == 14) || ($$cr1 == 14) || ($$cr2 == 14)

##f$OpenPPL_ExactlyOneStraightPossibleOnFlop##
[f$OpenPPL_StraightPossibleOnFlop && f$OpenPPL_AcePresentOnFlop && ((f$OpenPPL_LowestFlopCard >= 10) || (f$OpenPPL_TopFlopCard <= 5))]
|| [f$OpenPPL_StraightPossibleOnFlop && (f$OpenPPL_TopFlopCard - f$OpenPPL_LowestFlopCard <= 4)]

##f$OpenPPL_FlopCardPairedonTurn##
$$cr0 == $$cr3 || $$cr1 == $$cr3 || $$cr2 == $$cr3

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0==$$cs1 && $$cs0==$$cs2 && $$cs0==$$cs3 && $$cs0==$$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0==$$cs1 && $$cs0==$$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0==$$cs1 && $$cs0==$$cs2)
|| ($$cs0==$$cs1 && $$cs0==$$cs3)
|| ($$cs0==$$cs2 && $$cs0==$$cs3)
|| ($$cs1==$$cs2 && $$cs1==$$cs3) ]

##f$OpenPPL_FourCardsToWheelOnBoard##
`(rankbitscommon&0b0000000000111110) >= 4

##f$OpenPPL_FourOf1SuiteOnTurn##
($$cs0==$$cs1 && $$cs2==$$cs3 && $$cs0==$$cs3)

##f$OpenPPL_FullHouseOnBoard##
(pokervalcommon & fullhouse)

##OpenPPL_LowCardsOnBoard##
`f$OpenPPL_RankBitsCommonLowCardsOnly

##f$OpenPPL_MoreThanOneStraightPossibleOnFlop##
f$OpenPPL_StraightPossibleOnFlop && !f$OpenPPL_ExactlyOneStraightPossibleOnFlop

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >=4)

##f$OpenPPL_OneCardStraightFlushPossible##
(nstraightflushfillcommon <= 1)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop##
[(f$OpenPPL_TopFlopCard - f$OpenPPL_2ndTopFlopCard <= 3) && (f$OpenPPL_TopFlopCard != 14)]
|| [(f$OpenPPL_2ndTopFlopCard - f$OpenPPL_LowestFlopCard <= 3) && (f$OpenPPL_LowestFlopCard >= 2)]

##f$OpenPPL_OvercardsOnBoard##
(($$cr0 > rankhiplayer) ? 1 : 0) +
(($$cr1 > rankhiplayer) ? 1 : 0) +
(($$cr2 > rankhiplayer) ? 1 : 0) +
(($$cr3 > rankhiplayer) ? 1 : 0) +
(($$cr4 > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
($$cr0==$$cr1 || $$cr1==$$cr2 || $$cr0==$$cr2)

##f$OpenPPL_LowestFlopCard##
$$cr0 <= $$cr1 && $$cr0 <=  $$cr2 ? $$cr0 :
$$cr1 <= $$cr0 && $$cr1 <=  $$cr2 ? $$cr1 :
$$cr2 <= $$cr0 && $$cr2 <=  $$cr1 ? $$cr2 : -1

##f$OpenPPL_LowestFlopCardPairedOnTurn##
f$OpenPPL_LowestFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_PairOnTurn##
   f$OpenPPL_PairOnFlop
|| f$OpenPPL_TopFlopCardPairedonTurn
|| f$OpenPPL_2ndTopFlopCardPairedOnTurn
|| f$OpenPPL_LowestFlopCardPairedOnTurn

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
($$cr0==12 ||$$cr1==12 ||$$cr2==12)

##f$OpenPPL_RankBitsCommonLowCardsOnly##
// Bits 8..ace(low), last bit is unused
(rankbitscommon & 0b111111110)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  $$cr4 > $$cr0
&& $$cr4 > $$cr1
&& $$cr4 > $$cr2
&& $$cr4 > $$cr3 ]

##f$OpenPPL_2ndTopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 <= $$cr2 ? $$cr2 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 <= $$cr2 ? $$cr2 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 >= $$cr1 ? $$cr0 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 <= $$cr1 ? $$cr1 : -1

##f$OpenPPL_2ndTopFlopCardPairedOnRiver##
f$OpenPPL_2ndTopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_2ndTopFlopCardPairedOnTurn##
f$OpenPPL_2ndTopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_srankbitshero##
 (($$ps0==tsuit ? ($$pr0!=14 ? 2**$$pr0 : 0b100000000000010) : 0)
| ($$ps1==tsuit ? ($$pr1!=14 ? 2**$$pr1 : 0b100000000000010) : 0))

##f$OpenPPL_srankavailable##
// Available suited cards for other players,
// possibly contributing to a flush or straight flush
~(srankbitscommon | f$OpenPPL_srankbitshero)

##f$OpenPPL_StraightFlushPossibleByOthers##
`((srankbitscommon>>10)&0x1f) >= 3 && `(((srankbitscommon>>10)&0x1f)|((f$OpenPPL_srankavailable>>10)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 9)&0x1f) >= 3 && `(((srankbitscommon>> 9)&0x1f)|((f$OpenPPL_srankavailable>> 9)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 8)&0x1f) >= 3 && `(((srankbitscommon>> 8)&0x1f)|((f$OpenPPL_srankavailable>> 8)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 7)&0x1f) >= 3 && `(((srankbitscommon>> 7)&0x1f)|((f$OpenPPL_srankavailable>> 7)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 6)&0x1f) >= 3 && `(((srankbitscommon>> 6)&0x1f)|((f$OpenPPL_srankavailable>> 6)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 5)&0x1f) >= 3 && `(((srankbitscommon>> 5)&0x1f)|((f$OpenPPL_srankavailable>> 5)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 4)&0x1f) >= 3 && `(((srankbitscommon>> 4)&0x1f)|((f$OpenPPL_srankavailable>> 4)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 3)&0x1f) >= 3 && `(((srankbitscommon>> 3)&0x1f)|((f$OpenPPL_srankavailable>> 3)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 2)&0x1f) >= 3 && `(((srankbitscommon>> 2)&0x1f)|((f$OpenPPL_srankavailable>> 2)&0x1f)) == 5 ? 1 :
`((srankbitscommon>> 1)&0x1f) >= 3 && `(((srankbitscommon>> 1)&0x1f)|((f$OpenPPL_srankavailable>> 1)&0x1f)) == 5 ? 1 : 0

##f$OpenPPL_SuitsOnBoard##
($$cs0==$$cs1 && $$cs1==$$cs2 ? 1 :
($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2) ? 2 :
$$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2 ? 3 : 0) +
((($$cs3!=$$cs0) && ($$cs3!=$$cs1) && ($$cs3!=$$cs2)) ? 1 : 0) +
((($$cs4!=$$cs0) && ($$cs4!=$$cs1) && ($$cs4!=$$cs2) && ($$cs4!=$$cs3)) ? 1 : 0)

##f$OpenPPL_SuitsOnFlop##
($$cs0==$$cs1 && $$cs1==$$cs2) ? 1 :
(($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2)) ? 2 :
($$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2) ? 3 : 0

##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon>>10)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>9)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>8)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>7)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>6)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>5)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>4)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>3)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>2)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>1)&0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$OpenPPL_RankBitsCommOnFlop##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))

##f$OpenPPL_RankBitsCommOnTurn##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))
| ($$cr3 != 14 ? 2**$$cr3 : (0x4002))

##f$OpenPPL_StraightPossibleOnFlop##
`((f$OpenPPL_RankBitsCommOnFlop>>10)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>9)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>8)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>7)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>6)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>5)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>4)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>3)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>2)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnFlop>>1)&0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightPossibleOnTurn##
`((f$OpenPPL_RankBitsCommOnTurn>>10)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>9)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>8)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>7)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>6)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>5)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>4)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>3)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>2)&0x1f) >= 3 ? 1 :
`((f$OpenPPL_RankBitsCommOnTurn>>1)&0x1f) >= 3 ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$OpenPPL_TopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 ? $$cr2 : -1

##f$OpenPPL_TopFlopCardPairedonRiver##
f$OpenPPL_TopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_TopFlopCardPairedonTurn##
f$OpenPPL_TopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
($$cr0 == $$cr1 && $$cr1 == $$cr2) ? 1 :
($$cr0 == $$cr1 && $$cr1 == $$cr3) ? 1 :
($$cr0 == $$cr2 && $$cr2 == $$cr3) ? 1 :
($$cr1 == $$cr2 && $$cr2 == $$cr3) ? 1 : 0

##f$OpenPPL_TurnCardisOvercardToBoard##
[  $$cr3 > $$cr0
&& $$cr3 > $$cr1
&& $$cr3 > $$cr2 ]

##f$OpenPPL_TurnCardPaired##
($$cr3 == $$cr4)

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & istwopair) || (pokervalcommon & isfullhouse)

##f$OpenPPL_UncoordinatedFlop##
!f$OpenPPL_PairOnFlop
// No possible flush: guaranteed by the next condition...
// three different suits
&& (f$OpenPPL_SuitsOnFlop == 3)
&& !f$OpenPPL_StraightPossibleOnFlop
&& !f$OpenPPL_OpenEndedStraightDrawPossibleOnFlop

##f$OpenPPL_WheelPossible##
`((rankbitscommon & 0b111110) >= 3) ? 1 : 0

//***********************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//***********************************************************

##f$OpenPPL_HadOverpairOnFlop##
[  ispair
&& $$pr0 > $$cr0
&& $$pr0 > $$cr1
&& $$pr0 > $$cr2 ]

##f$OpenPPL_HadPairOnFlop##
(ispair || $$pr0==$$cr0 || $$pr0==$$cr1 || $$pr0==$$cr2  || $$pr1==$$cr0 || $$pr1==$$cr1  || $$pr1==$$cr2)

##f$OpenPPL_HadPairOnTurn##
f$OpenPPL_HadPairOnFlop || f$OpenPPL_FlopCardPairedonTurn || $$pr0 == $$cr3 || $$pr1 == $$cr3

##f$OpenPPL_HadTwoPairOnFlop##
   ($$pr0 == $$cr0 || $$pr0 == $$cr1 || $$pr0 == $$cr2)
&& ($$pr1 == $$cr1 || $$pr1 == $$cr1 || $$pr1 == $$cr2)
&& !ispair

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have2ndBestKickerOrBetter##
f$OpenPPL_Have2ndBestKicker || f$OpenPPL_HaveBestKickerOrBetter

##f$OpenPPL_Have2ndBestOverpair##
($KK && $$cr0 < 13 && $$cr1 < 13 && $$cr2 < 13 && $$cr3 < 13 && $$cr4 < 13 )

##f$OpenPPL_Have2ndBestOverpairOrBetter##
(f$OpenPPL_Have2ndBestOverpair ||f$OpenPPL_HaveBestOverpairOrBetter)

##f$OpenPPL_Have2ndNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)]

##f$OpenPPL_Have2ndNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##OpenPPL_Have2ndTopPair##
$$pr0 == f$OpenPPL_2ndBestBoardCard || $$pr1 == f$OpenPPL_2ndBestBoardCard

##OpenPPL_Have2ndTopSet##
ispair && $$pr0 == f$OpenPPL_2ndBestBoardCard

##f$OpenPPL_TopBitOfRankBitsCommon##
(1 << rankhicommon)

##f$OpenPPL_2ndTopBitOfRankBitsCommon##
(1 << f$OpenPPL_2ndBestBoardCard)

##f$OpenPPL_3rdTopBitOfRankBitsCommon##
(1 << f$OpenPPL_3rdBestBoardCard)

##f$OpenPPL_4thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_4thBestBoardCard)

##f$OpenPPL_5thTopBitOfRankBitsCommon##
(1 << f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_RankBitsCommonWithoutTopBit##
rankbits & ~f$OpenPPL_TopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopTwoBits##
f$OpenPPL_RankBitsCommonWithoutTopBit & ~f$OpenPPL_2ndTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopThreeBits##
f$OpenPPL_RankBitsCommonWithoutTopTwoBits & ~f$OpenPPL_3rdTopBitOfRankBitsCommon

##f$OpenPPL_RankBitsCommonWithoutTopFourBits##
f$OpenPPL_RankBitsCommonWithoutTopThreeBits & ~f$OpenPPL_4thTopBitOfRankBitsCommon

##f$OpenPPL_Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_Have3rdBestKickerOrBetter##
f$OpenPPL_Have3rdBestKicker || f$OpenPPL_Have2ndBestKickerOrBetter

##f$OpenPPL_Have3rdBestOverpair##
$QQ && $$cr0 < 12 && $$cr1 < 12 && $$cr2 < 12 && $$cr3 < 12 && $$cr4 < 12

##f$OpenPPL_3rdBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b100000000000000) != 1 ? 14 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutTopTwoBits & 0b000000000000100) != 1 ?  2 :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##f$OpenPPL_Have3rdBestOverpairOrBetter##
(f$OpenPPL_Have3rdBestOverpair ||  f$OpenPPL_Have2ndBestOverpairOrBetter)

##f$OpenPPL_Have3rdNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)]

##f$OpenPPL_Have3rdNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##OpenPPL_Have3rdOverpair##
ispair && ($$pr0 < f$OpenPPL_2ndBestBoardCard) && ($$pr0 > f$OpenPPL_3rdBestBoardCard)

##OpenPPL_Have3rdTopPair##
$$pr0 == f$OpenPPL_3rdBestBoardCard || $$pr1 == f$OpenPPL_3rdBestBoardCard

##OpenPPL_Have3rdTopSet##
ispair && $$pr0 == f$OpenPPL_3rdBestBoardCard

##f$OpenPPL_Have4thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)]

##f$OpenPPL_Have4thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 3)

##f$OpenPPL_4thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b100000000000000) != 1 ? 14 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutTopThreeBits & 0b000000000000100) != 1 ?  2 :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##OpenPPL_Have4thOverpair##
ispair && ($$pr0 < f$OpenPPL_3rdBestBoardCard) && ($$pr0 > f$OpenPPL_4thBestBoardCard)

##OpenPPL_Have4thTopPair##
$$pr0 == f$OpenPPL_4thBestBoardCard || $$pr1 == f$OpenPPL_4thBestBoardCard

##OpenPPL_Have4thTopSet##
ispair && $$pr0 == f$OpenPPL_4thBestBoardCard

##f$OpenPPL_Have5thNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)]

##f$OpenPPL_Have5thNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 4)

##f$OpenPPL_5thBestBoardCard##
// Only considering individual ranks, paired cards get ignored this way
// 14 (ace) can't happen, but anyway...
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b100000000000000) != 1 ? 14 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutTopFourBits & 0b000000000000100) != 1 ?  2 :
// Last two bits are ace (low) and unused.
// Both ignored.
-1

##OpenPPL_Have5thOverpair##
ispair && ($$pr0 < f$OpenPPL_4thBestBoardCard) && ($$pr0 > f$OpenPPL_5thBestBoardCard)

##f$OpenPPL_HaveBackdoor2ndNutFlushDraw##
f$OpenPPL_Have2ndNutFlush || f$OpenPPL_Have2ndNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 1)

##f$OpenPPL_HaveBackdoor3rdNutFlushDraw##
f$OpenPPL_Have3rdNutFlush || f$OpenPPL_Have3rdNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 2)

##f$OpenPPL_HaveBackdoorNutFlushDraw##
f$OpenPPL_HaveNutFlush || f$OpenPPL_HaveNutFlushDraw
|| (f$OpenPPL_HaveBackdoorFlushDraw && f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveBestKickerOrBetter##
(f$OpenPPL_HaveBestKicker || f$OpenPPL_HavePair  || f$OpenPPL_HaveOverpairOrBetter)

##f$OpenPPL_HaveBestOverpair##
($AA && $$cr0 < 14 && $$cr1 < 14 && $$cr2 < 14 && $$cr3 < 14 && $$cr4 < 14 )

##f$OpenPPL_HaveBestOverpairOrBetter##
(f$OpenPPL_HaveBestOverpair || f$OpenPPL_HaveTwoPair ||  f$OpenPPL_HaveSet
|| f$OpenPPL_HaveTrips || f$OpenPPL_HaveStraight || f$OpenPPL_HaveFlush
|| f$OpenPPL_HaveFullHouse || f$OpenPPL_HaveQuads || f$OpenPPL_HaveStraightFlush)

##f$OpenPPL_lowestBitOfRankBitsCommon##
(1>>ranklocommon)

##f$OpenPPL_RankBitsCommonWithoutLowestBit##
// we negate lowest-bit and then do an and-operation
rankbitscommon & ~f$OpenPPL_lowestBitOfRankBitsCommon

##f$OpenPPL_LowestBoardCard##
ranklocommon

##f$OpenPPL_2ndLowestBoardCard##
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000000100) != 1 ?  2 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000001000) != 1 ?  3 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000010000) != 1 ?  4 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000000100000) != 1 ?  5 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000001000000) != 1 ?  6 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000010000000) != 1 ?  7 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000000100000000) != 1 ?  8 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000001000000000) != 1 ?  9 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000010000000000) != 1 ? 10 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b000100000000000) != 1 ? 11 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b001000000000000) != 1 ? 12 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b010000000000000) != 1 ? 13 :
(f$OpenPPL_RankBitsCommonWithoutLowestBit & 0b100000000000000) != 1 ? 14 :
-1

##OpenPPL_HaveBottomTwoPair##
($$pr0 == f$OpenPPL_LowestBoardCard && $$pr1 == f$OpenPPL_2ndLowestBoardCard)
|| ($$pr0 == f$OpenPPL_2ndLowestBoardCard && $$pr1 == f$OpenPPL_LowestBoardCard)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveNothing##
!f$OpenPPL_HavePair && !f$OpenPPL_Overcards==2 && !f$OpenPPL_HaveBestOverpairOrBetter
&& !f$OpenPPL_HaveBackdoorFlushDraw && !f$OpenPPL_HaveBackdoorStraightDraw

##f$OpenPPL_HaveNutFlush##
[f$OpenPPL_HaveFlush && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)]

##f$OpenPPL_HaveNutFlushCard##
(f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutFlushDraw##
f$OpenPPL_HaveFlushDraw && (f$OpenPPL_NumberOfUnknownSuitedOvercards == 0)

##f$OpenPPL_HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$OpenPPL_HaveSet##
[  ispair
&& (($$pr0==$$cr0) || ($$pr0==$$cr1) || ($$pr0==$$cr2) || ($$pr0==$$cr3) || ($$pr0==$$cr4)) ]

##f$OpenPPL_HaveTrips##
!ispair
&&   [(pokerval & threeofakind) && !(pokervalcommon & threeofakind)
  || ((pokerval & fullhouse)    && `(pcbits &0b11100) == 1)
  ||  (pokerval & fourofakind)  && !(pokervalcommon & fourofakind)]

##f$OpenPPL_HaveUnderStraight##
f$OpenPPL_HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$OpenPPL_NumberOfUnknownSuitedOvercards##
// Unknown suited cards are cards, which are not on board and not in heroes hand.
`((~srankbits & 0x7fff) >> srankhi)

//***********************************************************
//
// OpenPPL - Other Symbols
//
//***********************************************************

##f$OpenPPL_IsFinalAnswer##
isfinalanswer

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_Random##
[ random*100 ]

//***********************************************************
//
// OpenPPL - Players and Opponents
//
//***********************************************************

##f$OpenPPL_Opponents##
nopponentsplaying

##f$OpenPPL_OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_OpponentIsAllin##
`f$OpenPPL_Opponents_AllinBits > 0

##f$OpenPPL_Opponents_AllinBits##
(betround == 1) ?
[0
|(((opponentsplayingbits & (1<<0)) && currentbet0>0 && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && currentbet1>0 && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && currentbet2>0 && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && currentbet3>0 && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && currentbet4>0 && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && currentbet5>0 && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && currentbet6>0 && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && currentbet7>0 && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && currentbet8>0 && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && currentbet9>0 && balance9==0) ? 1<<9 : 0)
]
:
[0
|(((opponentsplayingbits & (1<<0)) && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && balance9==0) ? 1<<9 : 0)
]

##f$OpenPPL_OpponentsLeft##
nopponentsplaying

##f$OpenPPL_OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpenPPL_OpponentsWithLowerStack##
((balance0 < balance) && (playersseatedbits & 0x0001) ? 1:0)+
((balance1 < balance) && (playersseatedbits & 0x0002) ? 1:0)+
((balance2 < balance) && (playersseatedbits & 0x0004) ? 1:0)+
((balance3 < balance) && (playersseatedbits & 0x0008) ? 1:0)+
((balance4 < balance) && (playersseatedbits & 0x0010) ? 1:0)+
((balance5 < balance) && (playersseatedbits & 0x0020) ? 1:0)+
((balance6 < balance) && (playersseatedbits & 0x0040) ? 1:0)+
((balance7 < balance) && (playersseatedbits & 0x0080) ? 1:0)+
((balance8 < balance) && (playersseatedbits & 0x0100) ? 1:0)+
((balance9 < balance) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToAct##
(dealposition > 2) ? (nchairsdealtleft + 2) :
(dealposition == 1) ? 1 :
0

//***********************************************************
//
// OpenPPL - Position Symbols
//
//***********************************************************

##f$OpenPPL_DealPositionLastRaiser##
(ac_aggressor == 0) ? ac_dealpos0 :
(ac_aggressor == 1) ? ac_dealpos1 :
(ac_aggressor == 2) ? ac_dealpos2 :
(ac_aggressor == 3) ? ac_dealpos3 :
(ac_aggressor == 4) ? ac_dealpos4 :
(ac_aggressor == 5) ? ac_dealpos5 :
(ac_aggressor == 6) ? ac_dealpos6 :
(ac_aggressor == 7) ? ac_dealpos7 :
(ac_aggressor == 8) ? ac_dealpos8 :
(ac_aggressor == 9) ? ac_dealpos9 :
-1

##f$OpenPPL_LastRaiserPosition##
// Big blind = 0
(f$OpenPPL_DealPositionLastRaiser == 2) ? 0 :
// Small blind = 1
(f$OpenPPL_DealPositionLastRaiser == 1) ? 1 :
// Normal players:
// BU = 2, CO = 3, ...
(nplayersdealt - f$OpenPPL_DealPositionLastRaiser + 2)

##f$OpenPPL_First##
0

##f$OpenPPL_Middle##
1

##f$OpenPPL_Last##
2

##f$OpenPPL_Position##
(betposition == 1) ? f$OpenPPL_First :
(betposition == nplayersplaying) ? f$OpenPPL_Last :
f$OpenPPL_Middle

//***********************************************************
//
// OpenPPL - Initialization of memory symbols
//
// For history symbols and other information,
// that can't be retrieved from OH-symbols
// and from the current gamestate only.
//
//***********************************************************

##f$OpenPPL_InitMemorySymbols##








//***********************************************************
//
// Not yet implemented - but already used
//
//***********************************************************

##f$OpenPPL_HaveBackdoorFlushDraw##
0

##f$OpenPPL_HavePair##
0

##f$OpenPPL_HaveOverpairOrBetter##
0

##f$OpenPPL_HaveTwoPair##
0

##f$OpenPPL_HaveBackdoorStraightDraw##
0

##f$OpenPPL_Overcards##
0

##f$OpenPPL_HaveFlush##
0

##f$OpenPPL_HaveStraight##
0

##f$OpenPPL_HaveQuads##
0

##f$OpenPPL_HaveStraightFlush##
0

##f$OpenPPL_HaveFullHouse##
0

