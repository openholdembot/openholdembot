//***********************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbost:      http://www.bonusbots.com/supportforum/YaBB.pl
//
// Contributors:
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   Nik0
//   NPNG
//   Poker_Dog
//   Stangelnator
//   SteveG1963
//   TheHighFish
//   Want2Learn
//   Zolp
//
//***********************************************************

//***********************************************************
//
// OpenPPL - BettingAction Symbols
//
//***********************************************************

##f$OpenPPL_BotCalledBeforeFlop##
didcallround1

##f$OpenPPL_BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$OpenPPL_BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$OpenPPL_BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$OpenPPL_BotsActionsOnFlop##
(didchecround2 + didcallround2 + didraisround2 + didswaground2)

##f$OpenPPL_BotsActionsOnThisRound##
(didchec + didcall + didrais + didswag)

##OpenPPL_BotsActionsPreflop##
(didchecround1 + didcallround1 + didraisround1 + didswaground1)

##f$OpenPPL_CalledOnFlop##
didcallround2

##f$OpenPPL_CalledOnTurn##
didcallround3

##f$OpenPPL_NoBettingOnFlop##
(nbetsround2 == 0)

##f$OpenPPL_NoBettingOnTurn##
(nbetsround3 == 0)


//***********************************************************
//
// OpenPPL - Betsizes and Stacksizes
//
//***********************************************************

##f$OpenPPL_AmountToCall##
(bblind > 0) ? (call / bblind) : 0

##f$OpenPPL_BigBlindSize##
bet1

##f$OpenPPL_PotSize##
(bblind > 0) ? (pot / bblind) : 0

##f$OpenPPL_StackSize##
(bblind > 0) ? (balance / bblind) : 0

##f$OpenPPL_TotalInvested##
br==1 && nbetsround>0 ? ncurrentbets*bblind :
br==2 && nbetsround1>0 ? ((nbetsround1+ncurrentbets)*bblind) :
br==3 && nbetsround1>0 ? ((nbetsround1+nbetsround2 + ncurrentbets)*bblind) :
br==4 && nbetsround1>0 ? ((nbetsround1+nbetsround2+nbetsround3+ncurrentbets)*bblind):
0

//***********************************************************
//
// OpenPPL - Board Symbols
//
//***********************************************************

##f$OpenPPL_AcePresentOnFlop##
($$cr0 == 14) || ($$cr1 == 14) || ($$cr2 == 14)

##f$OpenPPL_FlushPossible##
(nsuitedcommon >= 3)

##f$OpenPPL_FlushOnBoard##
($$cs0==$$cs1 && $$cs0==$$cs2 && $$cs0==$$cs3 && $$cs0==$$cs4)

##f$OpenPPL_FlushPossibleOnFlop##
($$cs0==$$cs1 && $$cs0==$$cs2)

##f$OpenPPL_FlushPossibleOnTurn##
[  ($$cs0==$$cs1 && $$cs0==$$cs2)
|| ($$cs0==$$cs1 && $$cs0==$$cs3)
|| ($$cs0==$$cs2 && $$cs0==$$cs3)
|| ($$cs1==$$cs2 && $$cs1==$$cs3) ]

##f$OpenPPL_FourOf1SuiteOnTurn##
($$cs0==$$cs1 && $$cs2==$$cs3 && $$cs0==$$cs3)

##f$OpenPPL_OneCardFlushPossible##
(nsuitedcommon >=4)

##f$OpenPPL_OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OpenPPL_OvercardsOnBoard##
(($$cr0 > rankhiplayer) ? 1 : 0) +
(($$cr1 > rankhiplayer) ? 1 : 0) +
(($$cr2 > rankhiplayer) ? 1 : 0) +
(($$cr3 > rankhiplayer) ? 1 : 0) +
(($$cr4 > rankhiplayer) ? 1 : 0)

##f$OpenPPL_PairOnBoard##
(nrankedcommon >= 2)

##f$OpenPPL_PairOnFlop##
($$cr0==$$cr1 || $$cr1==$$cr2 || $$cr0==$$cr2)

##f$OpenPPL_QuadsOnBoard##
(nrankedcommon == 4)

##f$OpenPPL_QueenPresentOnFlop##
($$cr0==12 ||$$cr1==12 ||$$cr2==12)

##f$OpenPPL_RiverCardisOvercardToBoard##
[  $$cr4 > $$cr0
&& $$cr4 > $$cr1
&& $$cr4 > $$cr2
&& $$cr4 > $$cr3 ]

##f$SecondTopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 <= $$cr2 ? $$cr2 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 <= $$cr2 ? $$cr2 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 >= $$cr1 ? $$cr0 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 <= $$cr1 ? $$cr1 : -1

##f$OpenPPL_SecondTopFlopCardPairedonRiver##
f$SecondTopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_SecondTopFlopCardPairedonTurn##
f$SecondTopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_SuitsOnBoard##
($$cs0==$$cs1 && $$cs1==$$cs2 ? 1 :
($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2) ? 2 :
$$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2 ? 3 : 0) +
((($$cs3!=$$cs0) && ($$cs3!=$$cs1) && ($$cs3!=$$cs2)) ? 1 : 0) +
((($$cs4!=$$cs0) && ($$cs4!=$$cs1) && ($$cs4!=$$cs2) && ($$cs4!=$$cs3)) ? 1 : 0)

##f$OpenPPL_SuitsOnFlop##
($$cs0==$$cs1 && $$cs1==$$cs2) ? 1 :
(($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2)) ? 2 :
($$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2) ? 3 : 0

##f$OpenPPL_StraightFlushPossible##
`((srankbitscommon>>10)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>9)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>8)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>7)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>6)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>5)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>4)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>3)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>2)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>1)&0x1f) >= 3 ? 1 : 0

##f$OpenPPL_StraightOnBoard##
(nstraightcommon >= 5)

##f$OpenPPL_StraightPossible##
(nstraightfillcommon <= 2)

##f$RankBitsCommOnFlop##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))

##f$RankBitsCommOnTurn##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))
| ($$cr3 != 14 ? 2**$$cr3 : (0x4002))

##f$OpenPPL_StraightPossibleOnFlop##
`((f$RankBitsCommOnFlop>>10)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>9)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>8)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>7)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>6)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>5)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>4)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>3)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>2)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>1)&0x1f) >= 3 ? 1 : 0

##f$StraightPossibleOnTurn##
`((f$RankBitsCommOnTurn>>10)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>9)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>8)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>7)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>6)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>5)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>4)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>3)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>2)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>1)&0x1f) >= 3 ? 1 : 0

##f$OpenPPL_ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$TopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 ? $$cr2 : -1

##f$OpenPPL_TopFlopCardPairedonRiver##
f$TopFlopCard == $$cr4 ? 1 : 0

##f$OpenPPL_TopFlopCardPairedonTurn##
f$TopFlopCard == $$cr3 ? 1 : 0

##f$OpenPPL_TripsOnBoard##
(nrankedcommon >= 3)

##f$OpenPPL_TripsOnBoardOnTurn##
($$cr0 == $$cr1 && $$cr1 == $$cr2) ? 1 :
($$cr0 == $$cr1 && $$cr1 == $$cr3) ? 1 :
($$cr0 == $$cr2 && $$cr2 == $$cr3) ? 1 :
($$cr1 == $$cr2 && $$cr2 == $$cr3) ? 1 : 0

##f$OpenPPL_TurnCardisOvercardToBoard##
[  $$cr3 > $$cr0
&& $$cr3 > $$cr1
&& $$cr3 > $$cr2 ]

##f$OpenPPL_TurnCardPaired##
($$cr3 == $$cr4)

##f$OpenPPL_TwoPairOnBoard##
(pokervalcommon & istwopair) || (pokervalcommon & isfullhouse)

##f$WheelPossible##
`((rankbitscommon & 0b111110) >= 3) ? 1 : 0

//***********************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//***********************************************************

##f$OpenPPL_HadOverPairOnFlop##
[  ispair
&& $$pr0 > $$cr0
&& $$pr0 > $$cr1
&& $$pr0 > $$cr2 ]

##f$OpenPPL_Have2ndBestKicker##
(mh_kickerbetter == 1)

##f$OpenPPL_Have3ndBestKicker##
(mh_kickerbetter == 2)

##f$OpenPPL_HaveBestKicker##
(mh_kickerbetter == 0)

##f$OpenPPL_HaveFlushDraw##
(nsuited >= 4)

##f$OpenPPL_HaveSet##
[  ispair
&& (($$pr0==$$cr0) || ($$pr0==$$cr1) || ($$pr0==$$cr2) || ($$pr0==$$cr3) || ($$pr0==$$cr4)) ]

//***********************************************************
//
// OpenPPL - Other Symbols
//
//***********************************************************

##f$OpenPPL_Others##
// Always true
1

##f$OpenPPL_Random##
[ random*100 ]

//***********************************************************
//
// OpenPPL - Players and Opponents
//
//***********************************************************

##Opponents##
nopponentsplaying

##OpponentsAtTable##
nopponentsdealt

##f$OpenPPL_OpponentIsAllin
`f$Opponents_AllinBits > 0

##f$Opponents_AllinBits##
(betround == 1) ?
[0
|(((opponentsplayingbits & (1<<0)) && currentbet0>0 && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && currentbet1>0 && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && currentbet2>0 && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && currentbet3>0 && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && currentbet4>0 && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && currentbet5>0 && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && currentbet6>0 && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && currentbet7>0 && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && currentbet8>0 && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && currentbet9>0 && balance9==0) ? 1<<9 : 0)
]
:
[0
|(((opponentsplayingbits & (1<<0)) && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && balance9==0) ? 1<<9 : 0)
]

##f$OpenPPL_OpponentsLeft##
nopponentsplaying

##f$OpenPPL_OpponentsWithLowerStack##
((balance0 < balance) && (playersseatedbits & 0x0001) ? 1:0)+
((balance1 < balance) && (playersseatedbits & 0x0002) ? 1:0)+
((balance2 < balance) && (playersseatedbits & 0x0004) ? 1:0)+
((balance3 < balance) && (playersseatedbits & 0x0008) ? 1:0)+
((balance4 < balance) && (playersseatedbits & 0x0010) ? 1:0)+
((balance5 < balance) && (playersseatedbits & 0x0020) ? 1:0)+
((balance6 < balance) && (playersseatedbits & 0x0040) ? 1:0)+
((balance7 < balance) && (playersseatedbits & 0x0080) ? 1:0)+
((balance8 < balance) && (playersseatedbits & 0x0100) ? 1:0)+
((balance9 < balance) && (playersseatedbits & 0x0200) ? 1:0)

##f$OpenPPL_StillToAct##
(dealposition > 2) ? (nchairsdealtleft + 2) :
(dealposition == 1) ? 1 :
0

//***********************************************************
//
// OpenPPL - Position Symbols
//
//***********************************************************
