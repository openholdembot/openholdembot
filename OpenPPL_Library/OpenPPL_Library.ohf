//***********************************************************
//
// OpenPPL Library
//   Supporting functions for the OpenPPL converter
//
// OpenPPL is part of the OpenHoldem project
//   Download page:         http://code.google.com/p/openholdembot/
//   Forums:                http://www.maxinmontreal.com/forums/index.php
//   Licensed under GPL v3: http://www.gnu.org/licenses/gpl.html
//
// The original PPL (Poker Programming Language) got invented by
//   Shanky Bonusbost:      http://www.bonusbots.com/supportforum/YaBB.pl
//
// Contributors:
//   Bob3456
//   CoolBotMe123
//   CrumbleSunday
//   Dr.Kaktuz
//   Efu
//   F1x3r
//   Fn101
//   KaeKruse
//   Kyo
//   Nik0
//   NPNG
//   Poker_Dog
//   Satanikut
//   Stangelnator
//   SteveG1963
//   TheHighFish
//   Want2Learn
//   Zolp
//
//***********************************************************

//***********************************************************
//
// OpenPPL - BettingAction Symbols
//
//***********************************************************

##f$BotCalledBeforeFlop##
didcallround1

##f$BotIsLastRaiser##
(ac_aggressor==userchair)

##f$BotRaisedBeforeFlop##
(didraisround1 || didswaground1)

##f$BotRaisedOnFlop##
(didraisround2 || didswaground2)

##f$BotRaisedOnTurn##
(didraisround3 || didswaground3)

##f$BotsActionsOnFlop##
(didcallround2 + didraisround2 + didswaground2)

##f$BotsActionsOnThisRound##
(didcall + didrais + didswag)

##BotsActionsPreflop##
(didcallround1 + didraisround1 + didswaground1)

##f$CalledOnFlop##
didcallround2

##f$CalledOnTurn##
didcallround3

##f$NoBettingOnFlop##
(nbetsround2 == 0)

##f$NoBettingOnTurn##
(nbetsround3 == 0)

//***********************************************************
//
// OpenPPL - Betsizes and Stacksizes
//
//***********************************************************

##f$AmountToCall##
(bblind > 0) ? (call / bblind) : 0

##f$BigBlindSize##
bet1

##f$PotSize##
(bblind > 0) ? (pot / bblind) : 0

##f$StackSize##
(bblind > 0) ? (balance / bblind) : 0

##f$TotalInvested##
br==1 && nbetsround>0 ? ncurrentbets * bblind :
br==2 && nbetsround1>0 ? ((nbetsround1 + ncurrentbets) * bblind) :
br==3 && nbetsround1>0 ? ((nbetsround1 + nbetsround2 + ncurrentbets) * bblind) :
br==4 && nbetsround1>0 ? ((nbetsround1 + nbetsround2 +n betsround3 + ncurrentbets) * bblind):
0

//***********************************************************
//
// OpenPPL - Board Symbols
//
//***********************************************************

##f$AcePresentOnFlop##
($$cr0 == 14) || ($$cr1 == 14) || ($$cr2 == 14)

##f$FlushPossible##
(nsuitedcommon >= 3)

##f$FlushOnBoard##
($$cs0==$$cs1 && $$cs0==$$cs2 && $$cs0==$$cs3 && $$cs0==$$cs4)

##f$FlushPossibleOnFlop##
($$cs0==$$cs1 && $$cs0==$$cs2)

##f$FlushPossibleOnTurn##
[  ($$cs0==$$cs1 && $$cs0==$$cs2)
|| ($$cs0==$$cs1 && $$cs0==$$cs3)
|| ($$cs0==$$cs2 && $$cs0==$$cs3)
|| ($$cs1==$$cs2 && $$cs1==$$cs3) ]

##f$FourCardsToWheelOnBoard##
`(rankbitscommon&0b0000000000111110) >= 4

##f$FourOf1SuiteOnTurn##
($$cs0==$$cs1 && $$cs2==$$cs3 && $$cs0==$$cs3)

##f$FullHouseOnBoard##
(pokervalcommon & fullhouse)

##f$OneCardFlushPossible##
(nsuitedcommon >=4)

##f$OneCardStraightPossible##
(nstraightfillcommon <= 1)

##f$OvercardsOnBoard##
(($$cr0 > rankhiplayer) ? 1 : 0) +
(($$cr1 > rankhiplayer) ? 1 : 0) +
(($$cr2 > rankhiplayer) ? 1 : 0) +
(($$cr3 > rankhiplayer) ? 1 : 0) +
(($$cr4 > rankhiplayer) ? 1 : 0)

##f$PairOnBoard##
(nrankedcommon >= 2)

##f$PairOnFlop##
($$cr0==$$cr1 || $$cr1==$$cr2 || $$cr0==$$cr2)

##f$QuadsOnBoard##
(nrankedcommon == 4)

##f$QueenPresentOnFlop##
($$cr0==12 ||$$cr1==12 ||$$cr2==12)

##f$RiverCardisOvercardToBoard##
[  $$cr4 > $$cr0
&& $$cr4 > $$cr1
&& $$cr4 > $$cr2
&& $$cr4 > $$cr3 ]

##f$SecondTopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 && $$cr1 <= $$cr2 ? $$cr2 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 && $$cr0 <= $$cr2 ? $$cr2 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 >= $$cr1 ? $$cr0 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 && $$cr0 <= $$cr1 ? $$cr1 : -1

##f$SecondTopFlopCardPairedonRiver##
f$SecondTopFlopCard == $$cr4 ? 1 : 0

##f$SecondTopFlopCardPairedonTurn##
f$SecondTopFlopCard == $$cr3 ? 1 : 0

##f$SuitsOnBoard##
($$cs0==$$cs1 && $$cs1==$$cs2 ? 1 :
($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2) ? 2 :
$$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2 ? 3 : 0) +
((($$cs3!=$$cs0) && ($$cs3!=$$cs1) && ($$cs3!=$$cs2)) ? 1 : 0) +
((($$cs4!=$$cs0) && ($$cs4!=$$cs1) && ($$cs4!=$$cs2) && ($$cs4!=$$cs3)) ? 1 : 0)

##f$SuitsOnFlop##
($$cs0==$$cs1 && $$cs1==$$cs2) ? 1 :
(($$cs0==$$cs1 && $$cs1!=$$cs2) || ($$cs0==$$cs2 && $$cs0!=$$cs1) || ($$cs0!=$$cs1 && $$cs1==$$cs2)) ? 2 :
($$cs0!=$$cs1 && $$cs1!=$$cs2 && $$cs0!=$$cs2) ? 3 : 0

##f$StraightFlushPossible##
`((srankbitscommon>>10)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>9)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>8)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>7)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>6)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>5)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>4)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>3)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>2)&0x1f) >= 3 ? 1 :
`((srankbitscommon>>1)&0x1f) >= 3 ? 1 : 0

##f$StraightOnBoard##
(nstraightcommon >= 5)

##f$StraightPossible##
(nstraightfillcommon <= 2)

##f$RankBitsCommOnFlop##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))

##f$RankBitsCommOnTurn##
  ($$cr0 != 14 ? 2**$$cr0 : (0x4002))
| ($$cr1 != 14 ? 2**$$cr1 : (0x4002))
| ($$cr2 != 14 ? 2**$$cr2 : (0x4002))
| ($$cr3 != 14 ? 2**$$cr3 : (0x4002))

##f$StraightPossibleOnFlop##
`((f$RankBitsCommOnFlop>>10)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>9)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>8)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>7)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>6)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>5)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>4)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>3)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>2)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnFlop>>1)&0x1f) >= 3 ? 1 : 0

##f$StraightPossibleOnTurn##
`((f$RankBitsCommOnTurn>>10)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>9)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>8)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>7)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>6)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>5)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>4)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>3)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>2)&0x1f) >= 3 ? 1 :
`((f$RankBitsCommOnTurn>>1)&0x1f) >= 3 ? 1 : 0

##f$ThreeCardStraightOnBoard##
nstraightcommon >= 3

##f$TopFlopCard##
$$cr0 >= $$cr1 && $$cr0 >= $$cr2 ? $$cr0 :
$$cr1 >= $$cr0 && $$cr1 >= $$cr2 ? $$cr1 :
$$cr2 >= $$cr0 && $$cr2 >= $$cr1 ? $$cr2 : -1

##f$TopFlopCardPairedonRiver##
f$TopFlopCard == $$cr4 ? 1 : 0

##f$TopFlopCardPairedonTurn##
f$TopFlopCard == $$cr3 ? 1 : 0

##f$TripsOnBoard##
(nrankedcommon >= 3)

##f$TripsOnBoardOnTurn##
($$cr0 == $$cr1 && $$cr1 == $$cr2) ? 1 :
($$cr0 == $$cr1 && $$cr1 == $$cr3) ? 1 :
($$cr0 == $$cr2 && $$cr2 == $$cr3) ? 1 :
($$cr1 == $$cr2 && $$cr2 == $$cr3) ? 1 : 0

##f$TurnCardisOvercardToBoard##
[  $$cr3 > $$cr0
&& $$cr3 > $$cr1
&& $$cr3 > $$cr2 ]

##f$TurnCardPaired##
($$cr3 == $$cr4)

##f$TwoPairOnBoard##
(pokervalcommon & istwopair) || (pokervalcommon & isfullhouse)

##f$WheelPossible##
`((rankbitscommon & 0b111110) >= 3) ? 1 : 0

//***********************************************************
//
// OpenPPL - Hand(Strength) Symbols
//
//***********************************************************

##f$HadOverPairOnFlop##
[  ispair
&& $$pr0 > $$cr0
&& $$pr0 > $$cr1
&& $$pr0 > $$cr2 ]

##f$HadPairOnFlop##
(ispair || pr0==$$cr0 || pr0==$$cr1 || pr0==$$cr2  || pr1==$$cr0 || pr1==$$cr1  || pr1==$$cr2)

##f$Have2ndBestKicker##
(mh_kickerbetter == 1)

##Have2ndBestOverpair##
($KK && $$cr0 < 13 && $$cr1 < 13 && $$cr2 < 13 && $$cr3 < 13 && $cr4 < 13 )

##Have2ndBestOverpairOrBetter##
(Have2ndBestOverpair || HaveBestOverpairOrBetter)

##f$Have2ndNutFlush##
[f$HaveFlush && (f$NumberOfUnknownSuitedOvercards == 1)]

##f$Have2ndNutFlushDraw##
f$HaveFlushDraw && (f$NumberOfUnknownSuitedOvercards == 1)

##f$Have3rdBestKicker##
(mh_kickerbetter == 2)

##f$Have3rdNutFlush##
[f$HaveFlush && (f$NumberOfUnknownSuitedOvercards == 2)]

##f$Have3rdNutFlushDraw##
f$HaveFlushDraw && (f$NumberOfUnknownSuitedOvercards == 2)

##f$Have4thNutFlush##
[f$HaveFlush && (f$NumberOfUnknownSuitedOvercards == 3)]

##f$Have4thNutFlushDraw##
f$HaveFlushDraw && (f$NumberOfUnknownSuitedOvercards == 3)

##f$Have5thNutFlush##
[f$HaveFlush && (f$NumberOfUnknownSuitedOvercards == 4)]

##f$Have5thNutFlushDraw##
f$HaveFlushDraw && (f$NumberOfUnknownSuitedOvercards == 4)

##f$HaveBestKicker##
(mh_kickerbetter == 0)

##f$HaveFlushDraw##
(nsuited >= 4)

##f$HaveNutFlush##
[f$HaveFlush && (f$NumberOfUnknownSuitedOvercards == 0)]

##f$HaveNutFlushCard##
(f$NumberOfUnknownSuitedOvercards == 0)

##f$HaveNutFlushDraw##
f$HaveFlushDraw && (f$NumberOfUnknownSuitedOvercards == 0)

##f$HaveNutStraightFlush##
isstraightflush && (nhandshi == 0)

##f$HaveSet##
[  ispair
&& (($$pr0==$$cr0) || ($$pr0==$$cr1) || ($$pr0==$$cr2) || ($$pr0==$$cr3) || ($$pr0==$$cr4)) ]

##f$HaveUnderStraight##
f$HaveStraight
&& (pcbits == 0b00011 || pcbits == 0b00001)

##f$NumberOfUnknownSuitedOvercards##
// Unknown suited cards are cards, which are not on board and not in heroes hand.
`((~srankbits & 0x7fff) >> srankhiplayer)

//***********************************************************
//
// OpenPPL - Other Symbols
//
//***********************************************************

##f$Others##
// Always true
1

##f$Random##
[ random*100 ]

//***********************************************************
//
// OpenPPL - Players and Opponents
//
//***********************************************************

##Opponents##
nopponentsplaying

##OpponentsAtTable##
nopponentsdealt

##f$OpponentIsAllin
`f$Opponents_AllinBits > 0

##f$Opponents_AllinBits##
(betround == 1) ?
[0
|(((opponentsplayingbits & (1<<0)) && currentbet0>0 && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && currentbet1>0 && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && currentbet2>0 && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && currentbet3>0 && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && currentbet4>0 && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && currentbet5>0 && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && currentbet6>0 && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && currentbet7>0 && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && currentbet8>0 && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && currentbet9>0 && balance9==0) ? 1<<9 : 0)
]
:
[0
|(((opponentsplayingbits & (1<<0)) && balance0==0) ? 1<<0 : 0)
|(((opponentsplayingbits & (1<<1)) && balance1==0) ? 1<<1 : 0)
|(((opponentsplayingbits & (1<<2)) && balance2==0) ? 1<<2 : 0)
|(((opponentsplayingbits & (1<<3)) && balance3==0) ? 1<<3 : 0)
|(((opponentsplayingbits & (1<<4)) && balance4==0) ? 1<<4 : 0)
|(((opponentsplayingbits & (1<<5)) && balance5==0) ? 1<<5 : 0)
|(((opponentsplayingbits & (1<<6)) && balance6==0) ? 1<<6 : 0)
|(((opponentsplayingbits & (1<<7)) && balance7==0) ? 1<<7 : 0)
|(((opponentsplayingbits & (1<<8)) && balance8==0) ? 1<<8 : 0)
|(((opponentsplayingbits & (1<<9)) && balance9==0) ? 1<<9 : 0)
]

##f$OpponentsLeft##
nopponentsplaying

##f$OpponentsOnFlop##
(nplayersround2 - 1)

##f$OpponentsWithLowerStack##
((balance0 < balance) && (playersseatedbits & 0x0001) ? 1:0)+
((balance1 < balance) && (playersseatedbits & 0x0002) ? 1:0)+
((balance2 < balance) && (playersseatedbits & 0x0004) ? 1:0)+
((balance3 < balance) && (playersseatedbits & 0x0008) ? 1:0)+
((balance4 < balance) && (playersseatedbits & 0x0010) ? 1:0)+
((balance5 < balance) && (playersseatedbits & 0x0020) ? 1:0)+
((balance6 < balance) && (playersseatedbits & 0x0040) ? 1:0)+
((balance7 < balance) && (playersseatedbits & 0x0080) ? 1:0)+
((balance8 < balance) && (playersseatedbits & 0x0100) ? 1:0)+
((balance9 < balance) && (playersseatedbits & 0x0200) ? 1:0)

##f$StillToAct##
(dealposition > 2) ? (nchairsdealtleft + 2) :
(dealposition == 1) ? 1 :
0

//***********************************************************
//
// OpenPPL - Position Symbols
//
//***********************************************************

##f$DealPositionLastRaiser##
(ac_aggressor == 0) ? ac_dealpos0 :
(ac_aggressor == 1) ? ac_dealpos1 :
(ac_aggressor == 2) ? ac_dealpos2 :
(ac_aggressor == 3) ? ac_dealpos3 :
(ac_aggressor == 4) ? ac_dealpos4 :
(ac_aggressor == 5) ? ac_dealpos5 :
(ac_aggressor == 6) ? ac_dealpos6 :
(ac_aggressor == 7) ? ac_dealpos7 :
(ac_aggressor == 8) ? ac_dealpos8 :
(ac_aggressor == 9) ? ac_dealpos9 :
-1

##f$LastRaiserPosition##
// Big blind = 0
(f$DealPositionLastRaiser == 2) ? 0 :
// Small blind = 1
(f$DealPositionLastRaiser == 1) ? 1 :
// Normal players:
// BU = 2, CO = 3, ...
(nplayersdealt - f$DealPositionLastRaiser + 2)

##f$First##
0

##f$Middle##
1

##f$Last##
2

##f$Position##
(betposition == 1) ? f$First :
(betposition == nplayersplaying) ? f$Last :
f$Middle

