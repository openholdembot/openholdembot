#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass amsbook
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth -2
\tocdepth -2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Setting up the *.ohf File for DLL Use
\end_layout

\begin_layout Standard
This part of the series will concentrate on how we will pass decisions from
 the dll to the autoplayer.
 It's simple, the *.ohf file contains the instructions for the autoplayer
 and will call the variable from the dll which contains the decision.
\end_layout

\begin_layout Subsection
Setting up the DLL
\end_layout

\begin_layout Standard
First we need to introduce a decision, variable.
 You can download the files used for this part.
 I will go through the changes I made:
\end_layout

\begin_layout Itemize
Added includes for preflop, flop, turn, river code 
\end_layout

\begin_layout Itemize
Added include for global vars 
\end_layout

\begin_layout Itemize
Added decision variable and call in "process_query" 
\end_layout

\begin_layout Itemize
Added code to set the decision variable in "process_state" 
\end_layout

\begin_layout Subsection
Changes to OH-DLL.cpp
\end_layout

\begin_layout Subsubsection
Include Section
\end_layout

\begin_layout Standard
The include section looks like this now:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define WHUSER_EXPORTS 
\end_layout

\begin_layout Plain Layout

#include "OH-DLL.h" 
\end_layout

\begin_layout Plain Layout

#include <windows.h> 
\end_layout

\begin_layout Plain Layout

#include <bitset>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

using namespace std;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "OH-globalvars.h" 
\end_layout

\begin_layout Plain Layout

#include "OH-general.h" 
\end_layout

\begin_layout Plain Layout

#include "preflop.h" 
\end_layout

\begin_layout Plain Layout

#include "flop.h" 
\end_layout

\begin_layout Plain Layout

#include "turn.h" 
\end_layout

\begin_layout Plain Layout

#include "river.h"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Changes to process_querry / process_state
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double process_query(const char* pquery){
\end_layout

\begin_layout Plain Layout

	if(pquery==NULL) 		return 0; 	//example 	if(strcmp(pquery,"dll$decision")==0)
 		return decision;
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

double process_state(holdem_state* pstate){
\end_layout

\begin_layout Plain Layout

	if(pstate!=NULL)       m_holdem_state[ (++m_ndx)&0xff ] = *pstate;
\end_layout

\begin_layout Plain Layout

	//resetting decision 	decision = 0;
\end_layout

\begin_layout Plain Layout

	//updating vars 	int_oh_symbols();
\end_layout

\begin_layout Plain Layout

	//calculating decision if it's my turn 	if(ismyturn){ 		switch(betround){
 			case 1: 				decision = preflop(); 				break; 			case 2: 				decision
 = flop(); 				break; 			case 3: 				decision = turn(); 				break; 			case
 4: 				decision = river(); 				break; 			default: 				break; 		} 	}
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can already see from the comments what is happening here, each time
 a new state is scraped:
\end_layout

\begin_layout Itemize
"int_oh_symbols" updates the values of our defined oh-symbol variables.
\end_layout

\begin_layout Itemize
the "decision" variable is reset to "0".
 
\end_layout

\begin_layout Itemize
when it is our turn (buttons visible) we call the code depending on the
 current betround to set the "decision" variable.
 
\end_layout

\begin_layout Subsubsection
Preflop, flop, turn, river includes
\end_layout

\begin_layout Standard
Until now they do not contain any code, they simply contain a function each
 which returns 0, e.g:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double preflop(){ 	/* 		preflop code 	*/
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
My next part of this series will be concentrating on coding a basic preflop
 for deep stack NL.
\end_layout

\begin_layout Subsubsection
Include for global vars
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// //OH DLL VARS ////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/////////
\end_layout

\begin_layout Plain Layout

//CONSECUTIVE STATES holdem_state    m_holdem_state[256];  unsigned char
   m_ndx;
\end_layout

\begin_layout Plain Layout

//VERSUS LIST AND PRWIN phl1k_t m_phl1k; pp13 prw1326;
\end_layout

\begin_layout Plain Layout

//SYMBOLS VAR pfgws_t m_pget_winholdem_symbol;
\end_layout

\begin_layout Plain Layout

////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////// //OWN VARS ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////
\end_layout

\begin_layout Plain Layout

//GENERAL VARS int ismyturn; int betround; double decision;
\end_layout

\begin_layout Plain Layout

//SUIT VARS int srankhiplayer; int srankbits; int flushrank;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I decided it's best to keep the vars in one include, as you will have tons
 of code later and it will be much more convenient to organise it in include
 files.
 My former NL micro stakes script contained about 50k lines.
 As you can see I added two new variables, "ismyturn" and "betround".
 
\end_layout

\begin_layout Subsubsection
Setting up the *.ohf file
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/Guide031.JPG

\end_inset


\end_layout

\begin_layout Standard
This is how a *.ohf file might look for this dll, ofourse I am always open
 to suggestions if someone else has any to improve it.
\end_layout

\begin_layout Subsubsection
Code in ##f$swag## 
\end_layout

\begin_layout Itemize
If our "decision" is 1 bblind or more we will swag the closest amount in
 bblinds.
\end_layout

\begin_layout Subsubsection
Code in ##f$call## 
\end_layout

\begin_layout Itemize
If for some reason we can't swag and your "decision" is not 0 we call.
 
\end_layout

\begin_layout Itemize
If the balance is smaller than 3 bblind we call.
 This is a failsafe, in case for some reason we will have put almost all
 money allin except a very small amout which can be left, if you are not
 very careful.
 Possible reasons are a problem with the exact dezimal representation of
 numbers or improper handling of the slider-bar.
 
\end_layout

\begin_layout Itemize
If we don't need to call anything we obviously check.
 
\end_layout

\begin_layout Subsection
Files
\end_layout

\begin_layout Standard
The files for this tutorial can be found here: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://www.maxinmontreal.com/wiki/index.php5?title=Image:OH-DLL-C.rar
\end_layout

\end_inset

.
\end_layout

\end_body
\end_document
